// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index_builder.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_index_5fbuilder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_index_5fbuilder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_index_5fbuilder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_index_5fbuilder_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_index_5fbuilder_2eproto;
namespace milvus {
namespace proto {
namespace service {
class BuildIndexRequest;
class BuildIndexRequestDefaultTypeInternal;
extern BuildIndexRequestDefaultTypeInternal _BuildIndexRequest_default_instance_;
class BuildIndexResponse;
class BuildIndexResponseDefaultTypeInternal;
extern BuildIndexResponseDefaultTypeInternal _BuildIndexResponse_default_instance_;
class DescribleIndexRequest;
class DescribleIndexRequestDefaultTypeInternal;
extern DescribleIndexRequestDefaultTypeInternal _DescribleIndexRequest_default_instance_;
class DescribleIndexResponse;
class DescribleIndexResponseDefaultTypeInternal;
extern DescribleIndexResponseDefaultTypeInternal _DescribleIndexResponse_default_instance_;
class GetIndexFilePathsRequest;
class GetIndexFilePathsRequestDefaultTypeInternal;
extern GetIndexFilePathsRequestDefaultTypeInternal _GetIndexFilePathsRequest_default_instance_;
class GetIndexFilePathsResponse;
class GetIndexFilePathsResponseDefaultTypeInternal;
extern GetIndexFilePathsResponseDefaultTypeInternal _GetIndexFilePathsResponse_default_instance_;
class IndexMeta;
class IndexMetaDefaultTypeInternal;
extern IndexMetaDefaultTypeInternal _IndexMeta_default_instance_;
}  // namespace service
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::service::BuildIndexRequest* Arena::CreateMaybeMessage<::milvus::proto::service::BuildIndexRequest>(Arena*);
template<> ::milvus::proto::service::BuildIndexResponse* Arena::CreateMaybeMessage<::milvus::proto::service::BuildIndexResponse>(Arena*);
template<> ::milvus::proto::service::DescribleIndexRequest* Arena::CreateMaybeMessage<::milvus::proto::service::DescribleIndexRequest>(Arena*);
template<> ::milvus::proto::service::DescribleIndexResponse* Arena::CreateMaybeMessage<::milvus::proto::service::DescribleIndexResponse>(Arena*);
template<> ::milvus::proto::service::GetIndexFilePathsRequest* Arena::CreateMaybeMessage<::milvus::proto::service::GetIndexFilePathsRequest>(Arena*);
template<> ::milvus::proto::service::GetIndexFilePathsResponse* Arena::CreateMaybeMessage<::milvus::proto::service::GetIndexFilePathsResponse>(Arena*);
template<> ::milvus::proto::service::IndexMeta* Arena::CreateMaybeMessage<::milvus::proto::service::IndexMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace service {

enum IndexStatus : int {
  NONE = 0,
  UNISSUED = 1,
  INPROGRESS = 2,
  FINISHED = 3,
  IndexStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IndexStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IndexStatus_IsValid(int value);
constexpr IndexStatus IndexStatus_MIN = NONE;
constexpr IndexStatus IndexStatus_MAX = FINISHED;
constexpr int IndexStatus_ARRAYSIZE = IndexStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexStatus_descriptor();
template<typename T>
inline const std::string& IndexStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IndexStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IndexStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IndexStatus_descriptor(), enum_t_value);
}
inline bool IndexStatus_Parse(
    const std::string& name, IndexStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndexStatus>(
    IndexStatus_descriptor(), name, value);
}
// ===================================================================

class BuildIndexRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.service.BuildIndexRequest) */ {
 public:
  BuildIndexRequest();
  virtual ~BuildIndexRequest();

  BuildIndexRequest(const BuildIndexRequest& from);
  BuildIndexRequest(BuildIndexRequest&& from) noexcept
    : BuildIndexRequest() {
    *this = ::std::move(from);
  }

  inline BuildIndexRequest& operator=(const BuildIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildIndexRequest& operator=(BuildIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildIndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildIndexRequest* internal_default_instance() {
    return reinterpret_cast<const BuildIndexRequest*>(
               &_BuildIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BuildIndexRequest& a, BuildIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildIndexRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildIndexRequest* New() const final {
    return CreateMaybeMessage<BuildIndexRequest>(nullptr);
  }

  BuildIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildIndexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildIndexRequest& from);
  void MergeFrom(const BuildIndexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildIndexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.service.BuildIndexRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_5fbuilder_2eproto);
    return ::descriptor_table_index_5fbuilder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPathsFieldNumber = 2,
    kTypeParamsFieldNumber = 3,
    kIndexParamsFieldNumber = 4,
  };
  // repeated string data_paths = 2;
  int data_paths_size() const;
  void clear_data_paths();
  const std::string& data_paths(int index) const;
  std::string* mutable_data_paths(int index);
  void set_data_paths(int index, const std::string& value);
  void set_data_paths(int index, std::string&& value);
  void set_data_paths(int index, const char* value);
  void set_data_paths(int index, const char* value, size_t size);
  std::string* add_data_paths();
  void add_data_paths(const std::string& value);
  void add_data_paths(std::string&& value);
  void add_data_paths(const char* value);
  void add_data_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_paths();

  // repeated .milvus.proto.common.KeyValuePair type_params = 3;
  int type_params_size() const;
  void clear_type_params();
  ::milvus::proto::common::KeyValuePair* mutable_type_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_type_params();
  const ::milvus::proto::common::KeyValuePair& type_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_type_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      type_params() const;

  // repeated .milvus.proto.common.KeyValuePair index_params = 4;
  int index_params_size() const;
  void clear_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_index_params();
  const ::milvus::proto::common::KeyValuePair& index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      index_params() const;

  // @@protoc_insertion_point(class_scope:milvus.proto.service.BuildIndexRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_paths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > type_params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > index_params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_5fbuilder_2eproto;
};
// -------------------------------------------------------------------

class BuildIndexResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.service.BuildIndexResponse) */ {
 public:
  BuildIndexResponse();
  virtual ~BuildIndexResponse();

  BuildIndexResponse(const BuildIndexResponse& from);
  BuildIndexResponse(BuildIndexResponse&& from) noexcept
    : BuildIndexResponse() {
    *this = ::std::move(from);
  }

  inline BuildIndexResponse& operator=(const BuildIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildIndexResponse& operator=(BuildIndexResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildIndexResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildIndexResponse* internal_default_instance() {
    return reinterpret_cast<const BuildIndexResponse*>(
               &_BuildIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BuildIndexResponse& a, BuildIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildIndexResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildIndexResponse* New() const final {
    return CreateMaybeMessage<BuildIndexResponse>(nullptr);
  }

  BuildIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildIndexResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildIndexResponse& from);
  void MergeFrom(const BuildIndexResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildIndexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.service.BuildIndexResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_5fbuilder_2eproto);
    return ::descriptor_table_index_5fbuilder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kIndexIDFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // int64 indexID = 2;
  void clear_indexid();
  ::PROTOBUF_NAMESPACE_ID::int64 indexid() const;
  void set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.service.BuildIndexResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::milvus::proto::common::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 indexid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_5fbuilder_2eproto;
};
// -------------------------------------------------------------------

class GetIndexFilePathsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.service.GetIndexFilePathsRequest) */ {
 public:
  GetIndexFilePathsRequest();
  virtual ~GetIndexFilePathsRequest();

  GetIndexFilePathsRequest(const GetIndexFilePathsRequest& from);
  GetIndexFilePathsRequest(GetIndexFilePathsRequest&& from) noexcept
    : GetIndexFilePathsRequest() {
    *this = ::std::move(from);
  }

  inline GetIndexFilePathsRequest& operator=(const GetIndexFilePathsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexFilePathsRequest& operator=(GetIndexFilePathsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIndexFilePathsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIndexFilePathsRequest* internal_default_instance() {
    return reinterpret_cast<const GetIndexFilePathsRequest*>(
               &_GetIndexFilePathsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetIndexFilePathsRequest& a, GetIndexFilePathsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexFilePathsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIndexFilePathsRequest* New() const final {
    return CreateMaybeMessage<GetIndexFilePathsRequest>(nullptr);
  }

  GetIndexFilePathsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIndexFilePathsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIndexFilePathsRequest& from);
  void MergeFrom(const GetIndexFilePathsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexFilePathsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.service.GetIndexFilePathsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_5fbuilder_2eproto);
    return ::descriptor_table_index_5fbuilder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexIDFieldNumber = 1,
  };
  // int64 indexID = 1;
  void clear_indexid();
  ::PROTOBUF_NAMESPACE_ID::int64 indexid() const;
  void set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.service.GetIndexFilePathsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 indexid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_5fbuilder_2eproto;
};
// -------------------------------------------------------------------

class GetIndexFilePathsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.service.GetIndexFilePathsResponse) */ {
 public:
  GetIndexFilePathsResponse();
  virtual ~GetIndexFilePathsResponse();

  GetIndexFilePathsResponse(const GetIndexFilePathsResponse& from);
  GetIndexFilePathsResponse(GetIndexFilePathsResponse&& from) noexcept
    : GetIndexFilePathsResponse() {
    *this = ::std::move(from);
  }

  inline GetIndexFilePathsResponse& operator=(const GetIndexFilePathsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexFilePathsResponse& operator=(GetIndexFilePathsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIndexFilePathsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIndexFilePathsResponse* internal_default_instance() {
    return reinterpret_cast<const GetIndexFilePathsResponse*>(
               &_GetIndexFilePathsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetIndexFilePathsResponse& a, GetIndexFilePathsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexFilePathsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIndexFilePathsResponse* New() const final {
    return CreateMaybeMessage<GetIndexFilePathsResponse>(nullptr);
  }

  GetIndexFilePathsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIndexFilePathsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIndexFilePathsResponse& from);
  void MergeFrom(const GetIndexFilePathsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexFilePathsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.service.GetIndexFilePathsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_5fbuilder_2eproto);
    return ::descriptor_table_index_5fbuilder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFilePathsFieldNumber = 3,
    kStatusFieldNumber = 1,
    kIndexIDFieldNumber = 2,
  };
  // repeated string index_file_paths = 3;
  int index_file_paths_size() const;
  void clear_index_file_paths();
  const std::string& index_file_paths(int index) const;
  std::string* mutable_index_file_paths(int index);
  void set_index_file_paths(int index, const std::string& value);
  void set_index_file_paths(int index, std::string&& value);
  void set_index_file_paths(int index, const char* value);
  void set_index_file_paths(int index, const char* value, size_t size);
  std::string* add_index_file_paths();
  void add_index_file_paths(const std::string& value);
  void add_index_file_paths(std::string&& value);
  void add_index_file_paths(const char* value);
  void add_index_file_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& index_file_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_index_file_paths();

  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // int64 indexID = 2;
  void clear_indexid();
  ::PROTOBUF_NAMESPACE_ID::int64 indexid() const;
  void set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.service.GetIndexFilePathsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> index_file_paths_;
  ::milvus::proto::common::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 indexid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_5fbuilder_2eproto;
};
// -------------------------------------------------------------------

class DescribleIndexRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.service.DescribleIndexRequest) */ {
 public:
  DescribleIndexRequest();
  virtual ~DescribleIndexRequest();

  DescribleIndexRequest(const DescribleIndexRequest& from);
  DescribleIndexRequest(DescribleIndexRequest&& from) noexcept
    : DescribleIndexRequest() {
    *this = ::std::move(from);
  }

  inline DescribleIndexRequest& operator=(const DescribleIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribleIndexRequest& operator=(DescribleIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribleIndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribleIndexRequest* internal_default_instance() {
    return reinterpret_cast<const DescribleIndexRequest*>(
               &_DescribleIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DescribleIndexRequest& a, DescribleIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribleIndexRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribleIndexRequest* New() const final {
    return CreateMaybeMessage<DescribleIndexRequest>(nullptr);
  }

  DescribleIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribleIndexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribleIndexRequest& from);
  void MergeFrom(const DescribleIndexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribleIndexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.service.DescribleIndexRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_5fbuilder_2eproto);
    return ::descriptor_table_index_5fbuilder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexIDFieldNumber = 1,
  };
  // int64 indexID = 1;
  void clear_indexid();
  ::PROTOBUF_NAMESPACE_ID::int64 indexid() const;
  void set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:milvus.proto.service.DescribleIndexRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 indexid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_5fbuilder_2eproto;
};
// -------------------------------------------------------------------

class DescribleIndexResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.service.DescribleIndexResponse) */ {
 public:
  DescribleIndexResponse();
  virtual ~DescribleIndexResponse();

  DescribleIndexResponse(const DescribleIndexResponse& from);
  DescribleIndexResponse(DescribleIndexResponse&& from) noexcept
    : DescribleIndexResponse() {
    *this = ::std::move(from);
  }

  inline DescribleIndexResponse& operator=(const DescribleIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribleIndexResponse& operator=(DescribleIndexResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribleIndexResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribleIndexResponse* internal_default_instance() {
    return reinterpret_cast<const DescribleIndexResponse*>(
               &_DescribleIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DescribleIndexResponse& a, DescribleIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribleIndexResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribleIndexResponse* New() const final {
    return CreateMaybeMessage<DescribleIndexResponse>(nullptr);
  }

  DescribleIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribleIndexResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribleIndexResponse& from);
  void MergeFrom(const DescribleIndexResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribleIndexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.service.DescribleIndexResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_5fbuilder_2eproto);
    return ::descriptor_table_index_5fbuilder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kIndexIDFieldNumber = 3,
    kEnqueTimeFieldNumber = 4,
    kScheduleTimeFieldNumber = 5,
    kBuildCompleteTimeFieldNumber = 6,
    kIndexStatusFieldNumber = 2,
  };
  // .milvus.proto.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::milvus::proto::common::Status& status() const;
  ::milvus::proto::common::Status* release_status();
  ::milvus::proto::common::Status* mutable_status();
  void set_allocated_status(::milvus::proto::common::Status* status);

  // int64 indexID = 3;
  void clear_indexid();
  ::PROTOBUF_NAMESPACE_ID::int64 indexid() const;
  void set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 enque_time = 4;
  void clear_enque_time();
  ::PROTOBUF_NAMESPACE_ID::int64 enque_time() const;
  void set_enque_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 schedule_time = 5;
  void clear_schedule_time();
  ::PROTOBUF_NAMESPACE_ID::int64 schedule_time() const;
  void set_schedule_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 build_complete_time = 6;
  void clear_build_complete_time();
  ::PROTOBUF_NAMESPACE_ID::int64 build_complete_time() const;
  void set_build_complete_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .milvus.proto.service.IndexStatus index_status = 2;
  void clear_index_status();
  ::milvus::proto::service::IndexStatus index_status() const;
  void set_index_status(::milvus::proto::service::IndexStatus value);

  // @@protoc_insertion_point(class_scope:milvus.proto.service.DescribleIndexResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::milvus::proto::common::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 indexid_;
  ::PROTOBUF_NAMESPACE_ID::int64 enque_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 schedule_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 build_complete_time_;
  int index_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_5fbuilder_2eproto;
};
// -------------------------------------------------------------------

class IndexMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.service.IndexMeta) */ {
 public:
  IndexMeta();
  virtual ~IndexMeta();

  IndexMeta(const IndexMeta& from);
  IndexMeta(IndexMeta&& from) noexcept
    : IndexMeta() {
    *this = ::std::move(from);
  }

  inline IndexMeta& operator=(const IndexMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexMeta& operator=(IndexMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexMeta* internal_default_instance() {
    return reinterpret_cast<const IndexMeta*>(
               &_IndexMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IndexMeta& a, IndexMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexMeta* New() const final {
    return CreateMaybeMessage<IndexMeta>(nullptr);
  }

  IndexMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexMeta& from);
  void MergeFrom(const IndexMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.service.IndexMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_5fbuilder_2eproto);
    return ::descriptor_table_index_5fbuilder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFilePathsFieldNumber = 7,
    kReqFieldNumber = 6,
    kIndexIDFieldNumber = 2,
    kEnqueTimeFieldNumber = 3,
    kScheduleTimeFieldNumber = 4,
    kBuildCompleteTimeFieldNumber = 5,
    kStatusFieldNumber = 1,
  };
  // repeated string index_file_paths = 7;
  int index_file_paths_size() const;
  void clear_index_file_paths();
  const std::string& index_file_paths(int index) const;
  std::string* mutable_index_file_paths(int index);
  void set_index_file_paths(int index, const std::string& value);
  void set_index_file_paths(int index, std::string&& value);
  void set_index_file_paths(int index, const char* value);
  void set_index_file_paths(int index, const char* value, size_t size);
  std::string* add_index_file_paths();
  void add_index_file_paths(const std::string& value);
  void add_index_file_paths(std::string&& value);
  void add_index_file_paths(const char* value);
  void add_index_file_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& index_file_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_index_file_paths();

  // .milvus.proto.service.BuildIndexRequest req = 6;
  bool has_req() const;
  void clear_req();
  const ::milvus::proto::service::BuildIndexRequest& req() const;
  ::milvus::proto::service::BuildIndexRequest* release_req();
  ::milvus::proto::service::BuildIndexRequest* mutable_req();
  void set_allocated_req(::milvus::proto::service::BuildIndexRequest* req);

  // int64 indexID = 2;
  void clear_indexid();
  ::PROTOBUF_NAMESPACE_ID::int64 indexid() const;
  void set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 enque_time = 3;
  void clear_enque_time();
  ::PROTOBUF_NAMESPACE_ID::int64 enque_time() const;
  void set_enque_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 schedule_time = 4;
  void clear_schedule_time();
  ::PROTOBUF_NAMESPACE_ID::int64 schedule_time() const;
  void set_schedule_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 build_complete_time = 5;
  void clear_build_complete_time();
  ::PROTOBUF_NAMESPACE_ID::int64 build_complete_time() const;
  void set_build_complete_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .milvus.proto.service.IndexStatus status = 1;
  void clear_status();
  ::milvus::proto::service::IndexStatus status() const;
  void set_status(::milvus::proto::service::IndexStatus value);

  // @@protoc_insertion_point(class_scope:milvus.proto.service.IndexMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> index_file_paths_;
  ::milvus::proto::service::BuildIndexRequest* req_;
  ::PROTOBUF_NAMESPACE_ID::int64 indexid_;
  ::PROTOBUF_NAMESPACE_ID::int64 enque_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 schedule_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 build_complete_time_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_5fbuilder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BuildIndexRequest

// repeated string data_paths = 2;
inline int BuildIndexRequest::data_paths_size() const {
  return data_paths_.size();
}
inline void BuildIndexRequest::clear_data_paths() {
  data_paths_.Clear();
}
inline const std::string& BuildIndexRequest::data_paths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.BuildIndexRequest.data_paths)
  return data_paths_.Get(index);
}
inline std::string* BuildIndexRequest::mutable_data_paths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.service.BuildIndexRequest.data_paths)
  return data_paths_.Mutable(index);
}
inline void BuildIndexRequest::set_data_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.service.BuildIndexRequest.data_paths)
  data_paths_.Mutable(index)->assign(value);
}
inline void BuildIndexRequest::set_data_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.service.BuildIndexRequest.data_paths)
  data_paths_.Mutable(index)->assign(std::move(value));
}
inline void BuildIndexRequest::set_data_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.service.BuildIndexRequest.data_paths)
}
inline void BuildIndexRequest::set_data_paths(int index, const char* value, size_t size) {
  data_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.service.BuildIndexRequest.data_paths)
}
inline std::string* BuildIndexRequest::add_data_paths() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.service.BuildIndexRequest.data_paths)
  return data_paths_.Add();
}
inline void BuildIndexRequest::add_data_paths(const std::string& value) {
  data_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.service.BuildIndexRequest.data_paths)
}
inline void BuildIndexRequest::add_data_paths(std::string&& value) {
  data_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.service.BuildIndexRequest.data_paths)
}
inline void BuildIndexRequest::add_data_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.service.BuildIndexRequest.data_paths)
}
inline void BuildIndexRequest::add_data_paths(const char* value, size_t size) {
  data_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.service.BuildIndexRequest.data_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BuildIndexRequest::data_paths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.service.BuildIndexRequest.data_paths)
  return data_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BuildIndexRequest::mutable_data_paths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.service.BuildIndexRequest.data_paths)
  return &data_paths_;
}

// repeated .milvus.proto.common.KeyValuePair type_params = 3;
inline int BuildIndexRequest::type_params_size() const {
  return type_params_.size();
}
inline ::milvus::proto::common::KeyValuePair* BuildIndexRequest::mutable_type_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.service.BuildIndexRequest.type_params)
  return type_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
BuildIndexRequest::mutable_type_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.service.BuildIndexRequest.type_params)
  return &type_params_;
}
inline const ::milvus::proto::common::KeyValuePair& BuildIndexRequest::type_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.BuildIndexRequest.type_params)
  return type_params_.Get(index);
}
inline ::milvus::proto::common::KeyValuePair* BuildIndexRequest::add_type_params() {
  // @@protoc_insertion_point(field_add:milvus.proto.service.BuildIndexRequest.type_params)
  return type_params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
BuildIndexRequest::type_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.service.BuildIndexRequest.type_params)
  return type_params_;
}

// repeated .milvus.proto.common.KeyValuePair index_params = 4;
inline int BuildIndexRequest::index_params_size() const {
  return index_params_.size();
}
inline ::milvus::proto::common::KeyValuePair* BuildIndexRequest::mutable_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.service.BuildIndexRequest.index_params)
  return index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
BuildIndexRequest::mutable_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.service.BuildIndexRequest.index_params)
  return &index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& BuildIndexRequest::index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.BuildIndexRequest.index_params)
  return index_params_.Get(index);
}
inline ::milvus::proto::common::KeyValuePair* BuildIndexRequest::add_index_params() {
  // @@protoc_insertion_point(field_add:milvus.proto.service.BuildIndexRequest.index_params)
  return index_params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
BuildIndexRequest::index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.service.BuildIndexRequest.index_params)
  return index_params_;
}

// -------------------------------------------------------------------

// BuildIndexResponse

// .milvus.proto.common.Status status = 1;
inline bool BuildIndexResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& BuildIndexResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.service.BuildIndexResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* BuildIndexResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.service.BuildIndexResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* BuildIndexResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.service.BuildIndexResponse.status)
  return status_;
}
inline void BuildIndexResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.service.BuildIndexResponse.status)
}

// int64 indexID = 2;
inline void BuildIndexResponse::clear_indexid() {
  indexid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BuildIndexResponse::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.BuildIndexResponse.indexID)
  return indexid_;
}
inline void BuildIndexResponse::set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  indexid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.BuildIndexResponse.indexID)
}

// -------------------------------------------------------------------

// GetIndexFilePathsRequest

// int64 indexID = 1;
inline void GetIndexFilePathsRequest::clear_indexid() {
  indexid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetIndexFilePathsRequest::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.GetIndexFilePathsRequest.indexID)
  return indexid_;
}
inline void GetIndexFilePathsRequest::set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  indexid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.GetIndexFilePathsRequest.indexID)
}

// -------------------------------------------------------------------

// GetIndexFilePathsResponse

// .milvus.proto.common.Status status = 1;
inline bool GetIndexFilePathsResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& GetIndexFilePathsResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.service.GetIndexFilePathsResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* GetIndexFilePathsResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.service.GetIndexFilePathsResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* GetIndexFilePathsResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.service.GetIndexFilePathsResponse.status)
  return status_;
}
inline void GetIndexFilePathsResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.service.GetIndexFilePathsResponse.status)
}

// int64 indexID = 2;
inline void GetIndexFilePathsResponse::clear_indexid() {
  indexid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetIndexFilePathsResponse::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.GetIndexFilePathsResponse.indexID)
  return indexid_;
}
inline void GetIndexFilePathsResponse::set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  indexid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.GetIndexFilePathsResponse.indexID)
}

// repeated string index_file_paths = 3;
inline int GetIndexFilePathsResponse::index_file_paths_size() const {
  return index_file_paths_.size();
}
inline void GetIndexFilePathsResponse::clear_index_file_paths() {
  index_file_paths_.Clear();
}
inline const std::string& GetIndexFilePathsResponse::index_file_paths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
  return index_file_paths_.Get(index);
}
inline std::string* GetIndexFilePathsResponse::mutable_index_file_paths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
  return index_file_paths_.Mutable(index);
}
inline void GetIndexFilePathsResponse::set_index_file_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
  index_file_paths_.Mutable(index)->assign(value);
}
inline void GetIndexFilePathsResponse::set_index_file_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
  index_file_paths_.Mutable(index)->assign(std::move(value));
}
inline void GetIndexFilePathsResponse::set_index_file_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  index_file_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
}
inline void GetIndexFilePathsResponse::set_index_file_paths(int index, const char* value, size_t size) {
  index_file_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
}
inline std::string* GetIndexFilePathsResponse::add_index_file_paths() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
  return index_file_paths_.Add();
}
inline void GetIndexFilePathsResponse::add_index_file_paths(const std::string& value) {
  index_file_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
}
inline void GetIndexFilePathsResponse::add_index_file_paths(std::string&& value) {
  index_file_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
}
inline void GetIndexFilePathsResponse::add_index_file_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  index_file_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
}
inline void GetIndexFilePathsResponse::add_index_file_paths(const char* value, size_t size) {
  index_file_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetIndexFilePathsResponse::index_file_paths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
  return index_file_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetIndexFilePathsResponse::mutable_index_file_paths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.service.GetIndexFilePathsResponse.index_file_paths)
  return &index_file_paths_;
}

// -------------------------------------------------------------------

// DescribleIndexRequest

// int64 indexID = 1;
inline void DescribleIndexRequest::clear_indexid() {
  indexid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribleIndexRequest::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.DescribleIndexRequest.indexID)
  return indexid_;
}
inline void DescribleIndexRequest::set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  indexid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.DescribleIndexRequest.indexID)
}

// -------------------------------------------------------------------

// DescribleIndexResponse

// .milvus.proto.common.Status status = 1;
inline bool DescribleIndexResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::milvus::proto::common::Status& DescribleIndexResponse::status() const {
  const ::milvus::proto::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:milvus.proto.service.DescribleIndexResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::common::Status*>(
      &::milvus::proto::common::_Status_default_instance_);
}
inline ::milvus::proto::common::Status* DescribleIndexResponse::release_status() {
  // @@protoc_insertion_point(field_release:milvus.proto.service.DescribleIndexResponse.status)
  
  ::milvus::proto::common::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::Status* DescribleIndexResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.service.DescribleIndexResponse.status)
  return status_;
}
inline void DescribleIndexResponse::set_allocated_status(::milvus::proto::common::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.service.DescribleIndexResponse.status)
}

// .milvus.proto.service.IndexStatus index_status = 2;
inline void DescribleIndexResponse::clear_index_status() {
  index_status_ = 0;
}
inline ::milvus::proto::service::IndexStatus DescribleIndexResponse::index_status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.DescribleIndexResponse.index_status)
  return static_cast< ::milvus::proto::service::IndexStatus >(index_status_);
}
inline void DescribleIndexResponse::set_index_status(::milvus::proto::service::IndexStatus value) {
  
  index_status_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.DescribleIndexResponse.index_status)
}

// int64 indexID = 3;
inline void DescribleIndexResponse::clear_indexid() {
  indexid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribleIndexResponse::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.DescribleIndexResponse.indexID)
  return indexid_;
}
inline void DescribleIndexResponse::set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  indexid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.DescribleIndexResponse.indexID)
}

// int64 enque_time = 4;
inline void DescribleIndexResponse::clear_enque_time() {
  enque_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribleIndexResponse::enque_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.DescribleIndexResponse.enque_time)
  return enque_time_;
}
inline void DescribleIndexResponse::set_enque_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  enque_time_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.DescribleIndexResponse.enque_time)
}

// int64 schedule_time = 5;
inline void DescribleIndexResponse::clear_schedule_time() {
  schedule_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribleIndexResponse::schedule_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.DescribleIndexResponse.schedule_time)
  return schedule_time_;
}
inline void DescribleIndexResponse::set_schedule_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  schedule_time_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.DescribleIndexResponse.schedule_time)
}

// int64 build_complete_time = 6;
inline void DescribleIndexResponse::clear_build_complete_time() {
  build_complete_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DescribleIndexResponse::build_complete_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.DescribleIndexResponse.build_complete_time)
  return build_complete_time_;
}
inline void DescribleIndexResponse::set_build_complete_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  build_complete_time_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.DescribleIndexResponse.build_complete_time)
}

// -------------------------------------------------------------------

// IndexMeta

// .milvus.proto.service.IndexStatus status = 1;
inline void IndexMeta::clear_status() {
  status_ = 0;
}
inline ::milvus::proto::service::IndexStatus IndexMeta::status() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.IndexMeta.status)
  return static_cast< ::milvus::proto::service::IndexStatus >(status_);
}
inline void IndexMeta::set_status(::milvus::proto::service::IndexStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.IndexMeta.status)
}

// int64 indexID = 2;
inline void IndexMeta::clear_indexid() {
  indexid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexMeta::indexid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.IndexMeta.indexID)
  return indexid_;
}
inline void IndexMeta::set_indexid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  indexid_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.IndexMeta.indexID)
}

// int64 enque_time = 3;
inline void IndexMeta::clear_enque_time() {
  enque_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexMeta::enque_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.IndexMeta.enque_time)
  return enque_time_;
}
inline void IndexMeta::set_enque_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  enque_time_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.IndexMeta.enque_time)
}

// int64 schedule_time = 4;
inline void IndexMeta::clear_schedule_time() {
  schedule_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexMeta::schedule_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.IndexMeta.schedule_time)
  return schedule_time_;
}
inline void IndexMeta::set_schedule_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  schedule_time_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.IndexMeta.schedule_time)
}

// int64 build_complete_time = 5;
inline void IndexMeta::clear_build_complete_time() {
  build_complete_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IndexMeta::build_complete_time() const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.IndexMeta.build_complete_time)
  return build_complete_time_;
}
inline void IndexMeta::set_build_complete_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  build_complete_time_ = value;
  // @@protoc_insertion_point(field_set:milvus.proto.service.IndexMeta.build_complete_time)
}

// .milvus.proto.service.BuildIndexRequest req = 6;
inline bool IndexMeta::has_req() const {
  return this != internal_default_instance() && req_ != nullptr;
}
inline void IndexMeta::clear_req() {
  if (GetArenaNoVirtual() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
}
inline const ::milvus::proto::service::BuildIndexRequest& IndexMeta::req() const {
  const ::milvus::proto::service::BuildIndexRequest* p = req_;
  // @@protoc_insertion_point(field_get:milvus.proto.service.IndexMeta.req)
  return p != nullptr ? *p : *reinterpret_cast<const ::milvus::proto::service::BuildIndexRequest*>(
      &::milvus::proto::service::_BuildIndexRequest_default_instance_);
}
inline ::milvus::proto::service::BuildIndexRequest* IndexMeta::release_req() {
  // @@protoc_insertion_point(field_release:milvus.proto.service.IndexMeta.req)
  
  ::milvus::proto::service::BuildIndexRequest* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::milvus::proto::service::BuildIndexRequest* IndexMeta::mutable_req() {
  
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::service::BuildIndexRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:milvus.proto.service.IndexMeta.req)
  return req_;
}
inline void IndexMeta::set_allocated_req(::milvus::proto::service::BuildIndexRequest* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete req_;
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    
  } else {
    
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.service.IndexMeta.req)
}

// repeated string index_file_paths = 7;
inline int IndexMeta::index_file_paths_size() const {
  return index_file_paths_.size();
}
inline void IndexMeta::clear_index_file_paths() {
  index_file_paths_.Clear();
}
inline const std::string& IndexMeta::index_file_paths(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.service.IndexMeta.index_file_paths)
  return index_file_paths_.Get(index);
}
inline std::string* IndexMeta::mutable_index_file_paths(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.service.IndexMeta.index_file_paths)
  return index_file_paths_.Mutable(index);
}
inline void IndexMeta::set_index_file_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.service.IndexMeta.index_file_paths)
  index_file_paths_.Mutable(index)->assign(value);
}
inline void IndexMeta::set_index_file_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.service.IndexMeta.index_file_paths)
  index_file_paths_.Mutable(index)->assign(std::move(value));
}
inline void IndexMeta::set_index_file_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  index_file_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.service.IndexMeta.index_file_paths)
}
inline void IndexMeta::set_index_file_paths(int index, const char* value, size_t size) {
  index_file_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.service.IndexMeta.index_file_paths)
}
inline std::string* IndexMeta::add_index_file_paths() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.service.IndexMeta.index_file_paths)
  return index_file_paths_.Add();
}
inline void IndexMeta::add_index_file_paths(const std::string& value) {
  index_file_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.service.IndexMeta.index_file_paths)
}
inline void IndexMeta::add_index_file_paths(std::string&& value) {
  index_file_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.service.IndexMeta.index_file_paths)
}
inline void IndexMeta::add_index_file_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  index_file_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.service.IndexMeta.index_file_paths)
}
inline void IndexMeta::add_index_file_paths(const char* value, size_t size) {
  index_file_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.service.IndexMeta.index_file_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IndexMeta::index_file_paths() const {
  // @@protoc_insertion_point(field_list:milvus.proto.service.IndexMeta.index_file_paths)
  return index_file_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IndexMeta::mutable_index_file_paths() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.service.IndexMeta.index_file_paths)
  return &index_file_paths_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace proto
}  // namespace milvus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::milvus::proto::service::IndexStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::service::IndexStatus>() {
  return ::milvus::proto::service::IndexStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_index_5fbuilder_2eproto
