// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: milvus.proto

#include "milvus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Address_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Blob_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValuePair_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgBase_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IndexDescription_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistentSegmentInfo_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaceholderValue_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_milvus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuerySegmentInfo_milvus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectionSchema_schema_2eproto;
namespace milvus {
namespace proto {
namespace milvus {
class CreateCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateCollectionRequest> _instance;
} _CreateCollectionRequest_default_instance_;
class DropCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropCollectionRequest> _instance;
} _DropCollectionRequest_default_instance_;
class HasCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HasCollectionRequest> _instance;
} _HasCollectionRequest_default_instance_;
class BoolResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoolResponse> _instance;
} _BoolResponse_default_instance_;
class StringResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringResponse> _instance;
} _StringResponse_default_instance_;
class DescribeCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeCollectionRequest> _instance;
} _DescribeCollectionRequest_default_instance_;
class DescribeCollectionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeCollectionResponse> _instance;
} _DescribeCollectionResponse_default_instance_;
class LoadCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadCollectionRequest> _instance;
} _LoadCollectionRequest_default_instance_;
class ReleaseCollectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseCollectionRequest> _instance;
} _ReleaseCollectionRequest_default_instance_;
class GetCollectionStatisticsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollectionStatisticsRequest> _instance;
} _GetCollectionStatisticsRequest_default_instance_;
class GetCollectionStatisticsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollectionStatisticsResponse> _instance;
} _GetCollectionStatisticsResponse_default_instance_;
class ShowCollectionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowCollectionsRequest> _instance;
} _ShowCollectionsRequest_default_instance_;
class ShowCollectionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowCollectionsResponse> _instance;
} _ShowCollectionsResponse_default_instance_;
class CreatePartitionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePartitionRequest> _instance;
} _CreatePartitionRequest_default_instance_;
class DropPartitionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropPartitionRequest> _instance;
} _DropPartitionRequest_default_instance_;
class HasPartitionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HasPartitionRequest> _instance;
} _HasPartitionRequest_default_instance_;
class LoadPartitionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadPartitionsRequest> _instance;
} _LoadPartitionsRequest_default_instance_;
class ReleasePartitionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleasePartitionsRequest> _instance;
} _ReleasePartitionsRequest_default_instance_;
class GetPartitionStatisticsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPartitionStatisticsRequest> _instance;
} _GetPartitionStatisticsRequest_default_instance_;
class GetPartitionStatisticsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPartitionStatisticsResponse> _instance;
} _GetPartitionStatisticsResponse_default_instance_;
class ShowPartitionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowPartitionsRequest> _instance;
} _ShowPartitionsRequest_default_instance_;
class ShowPartitionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowPartitionsResponse> _instance;
} _ShowPartitionsResponse_default_instance_;
class DescribeSegmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeSegmentRequest> _instance;
} _DescribeSegmentRequest_default_instance_;
class DescribeSegmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeSegmentResponse> _instance;
} _DescribeSegmentResponse_default_instance_;
class ShowSegmentsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowSegmentsRequest> _instance;
} _ShowSegmentsRequest_default_instance_;
class ShowSegmentsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowSegmentsResponse> _instance;
} _ShowSegmentsResponse_default_instance_;
class CreateIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateIndexRequest> _instance;
} _CreateIndexRequest_default_instance_;
class DescribeIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeIndexRequest> _instance;
} _DescribeIndexRequest_default_instance_;
class IndexDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexDescription> _instance;
} _IndexDescription_default_instance_;
class DescribeIndexResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribeIndexResponse> _instance;
} _DescribeIndexResponse_default_instance_;
class GetIndexStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIndexStateRequest> _instance;
} _GetIndexStateRequest_default_instance_;
class GetIndexStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIndexStateResponse> _instance;
} _GetIndexStateResponse_default_instance_;
class DropIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropIndexRequest> _instance;
} _DropIndexRequest_default_instance_;
class InsertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertRequest> _instance;
} _InsertRequest_default_instance_;
class InsertResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertResponse> _instance;
} _InsertResponse_default_instance_;
class PlaceholderValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceholderValue> _instance;
} _PlaceholderValue_default_instance_;
class PlaceholderGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceholderGroup> _instance;
} _PlaceholderGroup_default_instance_;
class SearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchRequest> _instance;
} _SearchRequest_default_instance_;
class HitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hits> _instance;
} _Hits_default_instance_;
class SearchResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchResults> _instance;
} _SearchResults_default_instance_;
class FlushRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushRequest> _instance;
} _FlushRequest_default_instance_;
class PersistentSegmentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistentSegmentInfo> _instance;
} _PersistentSegmentInfo_default_instance_;
class GetPersistentSegmentInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPersistentSegmentInfoRequest> _instance;
} _GetPersistentSegmentInfoRequest_default_instance_;
class GetPersistentSegmentInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPersistentSegmentInfoResponse> _instance;
} _GetPersistentSegmentInfoResponse_default_instance_;
class QuerySegmentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuerySegmentInfo> _instance;
} _QuerySegmentInfo_default_instance_;
class GetQuerySegmentInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetQuerySegmentInfoRequest> _instance;
} _GetQuerySegmentInfoRequest_default_instance_;
class GetQuerySegmentInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetQuerySegmentInfoResponse> _instance;
} _GetQuerySegmentInfoResponse_default_instance_;
class RegisterLinkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterLinkRequest> _instance;
} _RegisterLinkRequest_default_instance_;
class RegisterLinkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterLinkResponse> _instance;
} _RegisterLinkResponse_default_instance_;
}  // namespace milvus
}  // namespace proto
}  // namespace milvus
static void InitDefaultsscc_info_BoolResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_BoolResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::BoolResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::BoolResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoolResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BoolResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_CreateCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CreateCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CreateCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CreateCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CreateCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_CreateIndexRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CreateIndexRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CreateIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CreateIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateIndexRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CreateIndexRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_CreatePartitionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_CreatePartitionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::CreatePartitionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::CreatePartitionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreatePartitionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CreatePartitionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DescribeCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeCollectionResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeCollectionResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeCollectionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeCollectionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DescribeCollectionResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DescribeCollectionResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_CollectionSchema_schema_2eproto.base,}};

static void InitDefaultsscc_info_DescribeIndexRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeIndexRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeIndexRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DescribeIndexRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeIndexResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeIndexResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeIndexResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeIndexResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DescribeIndexResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DescribeIndexResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_IndexDescription_milvus_2eproto.base,}};

static void InitDefaultsscc_info_DescribeSegmentRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeSegmentRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeSegmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeSegmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeSegmentRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DescribeSegmentRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribeSegmentResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DescribeSegmentResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::DescribeSegmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DescribeSegmentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribeSegmentResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DescribeSegmentResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_DropCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DropCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DropCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DropCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DropCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DropIndexRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DropIndexRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DropIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DropIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropIndexRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DropIndexRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_DropPartitionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_DropPartitionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::DropPartitionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::DropPartitionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DropPartitionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DropPartitionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_FlushRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_FlushRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::FlushRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::FlushRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlushRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FlushRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetCollectionStatisticsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetCollectionStatisticsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetCollectionStatisticsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetCollectionStatisticsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCollectionStatisticsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetCollectionStatisticsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetCollectionStatisticsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetCollectionStatisticsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetCollectionStatisticsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetCollectionStatisticsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetCollectionStatisticsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetCollectionStatisticsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_GetIndexStateRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetIndexStateRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetIndexStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetIndexStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetIndexStateRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetIndexStateRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetIndexStateResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetIndexStateResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetIndexStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetIndexStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetIndexStateResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetIndexStateResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_GetPartitionStatisticsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetPartitionStatisticsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetPartitionStatisticsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetPartitionStatisticsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPartitionStatisticsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetPartitionStatisticsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetPartitionStatisticsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetPartitionStatisticsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetPartitionStatisticsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetPartitionStatisticsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetPartitionStatisticsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetPartitionStatisticsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_GetPersistentSegmentInfoRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetPersistentSegmentInfoRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetPersistentSegmentInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetPersistentSegmentInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPersistentSegmentInfoRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetPersistentSegmentInfoRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetPersistentSegmentInfoResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetPersistentSegmentInfoResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetPersistentSegmentInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetPersistentSegmentInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetPersistentSegmentInfoResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetPersistentSegmentInfoResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_PersistentSegmentInfo_milvus_2eproto.base,}};

static void InitDefaultsscc_info_GetQuerySegmentInfoRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetQuerySegmentInfoRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetQuerySegmentInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetQuerySegmentInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetQuerySegmentInfoRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetQuerySegmentInfoRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_GetQuerySegmentInfoResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_GetQuerySegmentInfoResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::GetQuerySegmentInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::GetQuerySegmentInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetQuerySegmentInfoResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetQuerySegmentInfoResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,
      &scc_info_QuerySegmentInfo_milvus_2eproto.base,}};

static void InitDefaultsscc_info_HasCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_HasCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::HasCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::HasCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HasCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HasCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_HasPartitionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_HasPartitionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::HasPartitionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::HasPartitionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HasPartitionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HasPartitionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_Hits_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_Hits_default_instance_;
    new (ptr) ::milvus::proto::milvus::Hits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::Hits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hits_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Hits_milvus_2eproto}, {}};

static void InitDefaultsscc_info_IndexDescription_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_IndexDescription_default_instance_;
    new (ptr) ::milvus::proto::milvus::IndexDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::IndexDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IndexDescription_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IndexDescription_milvus_2eproto}, {
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_InsertRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_InsertRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::InsertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::InsertRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_InsertRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,
      &scc_info_Blob_common_2eproto.base,}};

static void InitDefaultsscc_info_InsertResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_InsertResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::InsertResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::InsertResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InsertResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_LoadCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_LoadCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::LoadCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::LoadCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LoadCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_LoadPartitionsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_LoadPartitionsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::LoadPartitionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::LoadPartitionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadPartitionsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LoadPartitionsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_PersistentSegmentInfo_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_PersistentSegmentInfo_default_instance_;
    new (ptr) ::milvus::proto::milvus::PersistentSegmentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::PersistentSegmentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistentSegmentInfo_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PersistentSegmentInfo_milvus_2eproto}, {}};

static void InitDefaultsscc_info_PlaceholderGroup_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_PlaceholderGroup_default_instance_;
    new (ptr) ::milvus::proto::milvus::PlaceholderGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::PlaceholderGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceholderGroup_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlaceholderGroup_milvus_2eproto}, {
      &scc_info_PlaceholderValue_milvus_2eproto.base,}};

static void InitDefaultsscc_info_PlaceholderValue_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_PlaceholderValue_default_instance_;
    new (ptr) ::milvus::proto::milvus::PlaceholderValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::PlaceholderValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaceholderValue_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlaceholderValue_milvus_2eproto}, {}};

static void InitDefaultsscc_info_QuerySegmentInfo_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_QuerySegmentInfo_default_instance_;
    new (ptr) ::milvus::proto::milvus::QuerySegmentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::QuerySegmentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuerySegmentInfo_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QuerySegmentInfo_milvus_2eproto}, {}};

static void InitDefaultsscc_info_RegisterLinkRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_RegisterLinkRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::RegisterLinkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::RegisterLinkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterLinkRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RegisterLinkRequest_milvus_2eproto}, {}};

static void InitDefaultsscc_info_RegisterLinkResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_RegisterLinkResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::RegisterLinkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::RegisterLinkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegisterLinkResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RegisterLinkResponse_milvus_2eproto}, {
      &scc_info_Address_common_2eproto.base,
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseCollectionRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ReleaseCollectionRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ReleaseCollectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ReleaseCollectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleaseCollectionRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReleaseCollectionRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ReleasePartitionsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ReleasePartitionsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ReleasePartitionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ReleasePartitionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleasePartitionsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReleasePartitionsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_SearchRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_SearchRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::SearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::SearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SearchRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_SearchResults_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_SearchResults_default_instance_;
    new (ptr) ::milvus::proto::milvus::SearchResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::SearchResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchResults_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SearchResults_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_ShowCollectionsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShowCollectionsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShowCollectionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShowCollectionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowCollectionsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ShowCollectionsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ShowCollectionsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShowCollectionsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShowCollectionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShowCollectionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowCollectionsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ShowCollectionsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_ShowPartitionsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShowPartitionsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShowPartitionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShowPartitionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowPartitionsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ShowPartitionsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ShowPartitionsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShowPartitionsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShowPartitionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShowPartitionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowPartitionsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ShowPartitionsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_ShowSegmentsRequest_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShowSegmentsRequest_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShowSegmentsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShowSegmentsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowSegmentsRequest_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ShowSegmentsRequest_milvus_2eproto}, {
      &scc_info_MsgBase_common_2eproto.base,}};

static void InitDefaultsscc_info_ShowSegmentsResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_ShowSegmentsResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::ShowSegmentsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::ShowSegmentsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShowSegmentsResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ShowSegmentsResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_StringResponse_milvus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::milvus::_StringResponse_default_instance_;
    new (ptr) ::milvus::proto::milvus::StringResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::milvus::StringResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StringResponse_milvus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StringResponse_milvus_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_milvus_2eproto[49];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_milvus_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_milvus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_milvus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateCollectionRequest, schema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropCollectionRequest, collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasCollectionRequest, collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::BoolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::BoolResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::BoolResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::StringResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::StringResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::StringResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionRequest, collectionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, schema_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeCollectionResponse, collectionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadCollectionRequest, collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleaseCollectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleaseCollectionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleaseCollectionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleaseCollectionRequest, collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsRequest, collection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetCollectionStatisticsResponse, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsRequest, db_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowCollectionsResponse, collection_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreatePartitionRequest, partition_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropPartitionRequest, partition_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::HasPartitionRequest, partition_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::LoadPartitionsRequest, partition_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ReleasePartitionsRequest, partition_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsRequest, partition_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPartitionStatisticsResponse, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsRequest, collectionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowPartitionsResponse, partitionids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentRequest, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentRequest, segmentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, buildid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeSegmentResponse, enable_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsRequest, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsRequest, partitionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::ShowSegmentsResponse, segmentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::CreateIndexRequest, extra_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexRequest, index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::IndexDescription, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DescribeIndexResponse, index_descriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateRequest, index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetIndexStateResponse, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, field_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::DropIndexRequest, index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, partition_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, row_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertRequest, hash_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertResponse, rowid_begin_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::InsertResponse, rowid_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PlaceholderValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PlaceholderValue, tag_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PlaceholderValue, type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PlaceholderValue, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PlaceholderGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PlaceholderGroup, placeholders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, collection_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, partition_names_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, dsl_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchRequest, placeholder_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::Hits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::Hits, ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::Hits, row_data_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::Hits, scores_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchResults, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::SearchResults, hits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushRequest, db_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::FlushRequest, collection_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, open_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, sealed_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, flushed_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, num_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, mem_size_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::PersistentSegmentInfo, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoRequest, dbname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoRequest, collectionname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetPersistentSegmentInfoResponse, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, segmentid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, collectionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, partitionid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, mem_size_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, num_rows_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, index_name_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::QuerySegmentInfo, indexid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoRequest, base_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoRequest, dbname_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoRequest, collectionname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::GetQuerySegmentInfoResponse, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RegisterLinkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RegisterLinkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RegisterLinkResponse, address_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::milvus::RegisterLinkResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::milvus::proto::milvus::CreateCollectionRequest)},
  { 9, -1, sizeof(::milvus::proto::milvus::DropCollectionRequest)},
  { 17, -1, sizeof(::milvus::proto::milvus::HasCollectionRequest)},
  { 25, -1, sizeof(::milvus::proto::milvus::BoolResponse)},
  { 32, -1, sizeof(::milvus::proto::milvus::StringResponse)},
  { 39, -1, sizeof(::milvus::proto::milvus::DescribeCollectionRequest)},
  { 48, -1, sizeof(::milvus::proto::milvus::DescribeCollectionResponse)},
  { 56, -1, sizeof(::milvus::proto::milvus::LoadCollectionRequest)},
  { 64, -1, sizeof(::milvus::proto::milvus::ReleaseCollectionRequest)},
  { 72, -1, sizeof(::milvus::proto::milvus::GetCollectionStatisticsRequest)},
  { 80, -1, sizeof(::milvus::proto::milvus::GetCollectionStatisticsResponse)},
  { 87, -1, sizeof(::milvus::proto::milvus::ShowCollectionsRequest)},
  { 94, -1, sizeof(::milvus::proto::milvus::ShowCollectionsResponse)},
  { 101, -1, sizeof(::milvus::proto::milvus::CreatePartitionRequest)},
  { 110, -1, sizeof(::milvus::proto::milvus::DropPartitionRequest)},
  { 119, -1, sizeof(::milvus::proto::milvus::HasPartitionRequest)},
  { 128, -1, sizeof(::milvus::proto::milvus::LoadPartitionsRequest)},
  { 137, -1, sizeof(::milvus::proto::milvus::ReleasePartitionsRequest)},
  { 146, -1, sizeof(::milvus::proto::milvus::GetPartitionStatisticsRequest)},
  { 155, -1, sizeof(::milvus::proto::milvus::GetPartitionStatisticsResponse)},
  { 162, -1, sizeof(::milvus::proto::milvus::ShowPartitionsRequest)},
  { 171, -1, sizeof(::milvus::proto::milvus::ShowPartitionsResponse)},
  { 179, -1, sizeof(::milvus::proto::milvus::DescribeSegmentRequest)},
  { 187, -1, sizeof(::milvus::proto::milvus::DescribeSegmentResponse)},
  { 196, -1, sizeof(::milvus::proto::milvus::ShowSegmentsRequest)},
  { 204, -1, sizeof(::milvus::proto::milvus::ShowSegmentsResponse)},
  { 211, -1, sizeof(::milvus::proto::milvus::CreateIndexRequest)},
  { 221, -1, sizeof(::milvus::proto::milvus::DescribeIndexRequest)},
  { 231, -1, sizeof(::milvus::proto::milvus::IndexDescription)},
  { 239, -1, sizeof(::milvus::proto::milvus::DescribeIndexResponse)},
  { 246, -1, sizeof(::milvus::proto::milvus::GetIndexStateRequest)},
  { 256, -1, sizeof(::milvus::proto::milvus::GetIndexStateResponse)},
  { 263, -1, sizeof(::milvus::proto::milvus::DropIndexRequest)},
  { 273, -1, sizeof(::milvus::proto::milvus::InsertRequest)},
  { 284, -1, sizeof(::milvus::proto::milvus::InsertResponse)},
  { 292, -1, sizeof(::milvus::proto::milvus::PlaceholderValue)},
  { 300, -1, sizeof(::milvus::proto::milvus::PlaceholderGroup)},
  { 306, -1, sizeof(::milvus::proto::milvus::SearchRequest)},
  { 317, -1, sizeof(::milvus::proto::milvus::Hits)},
  { 325, -1, sizeof(::milvus::proto::milvus::SearchResults)},
  { 332, -1, sizeof(::milvus::proto::milvus::FlushRequest)},
  { 340, -1, sizeof(::milvus::proto::milvus::PersistentSegmentInfo)},
  { 354, -1, sizeof(::milvus::proto::milvus::GetPersistentSegmentInfoRequest)},
  { 362, -1, sizeof(::milvus::proto::milvus::GetPersistentSegmentInfoResponse)},
  { 369, -1, sizeof(::milvus::proto::milvus::QuerySegmentInfo)},
  { 381, -1, sizeof(::milvus::proto::milvus::GetQuerySegmentInfoRequest)},
  { 389, -1, sizeof(::milvus::proto::milvus::GetQuerySegmentInfoResponse)},
  { 396, -1, sizeof(::milvus::proto::milvus::RegisterLinkRequest)},
  { 401, -1, sizeof(::milvus::proto::milvus::RegisterLinkResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CreateCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DropCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_HasCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_BoolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_StringResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeCollectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_LoadCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ReleaseCollectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetCollectionStatisticsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetCollectionStatisticsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShowCollectionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShowCollectionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CreatePartitionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DropPartitionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_HasPartitionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_LoadPartitionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ReleasePartitionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetPartitionStatisticsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetPartitionStatisticsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShowPartitionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShowPartitionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeSegmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeSegmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShowSegmentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_ShowSegmentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_CreateIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_IndexDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DescribeIndexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetIndexStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetIndexStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_DropIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_InsertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_InsertResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_PlaceholderValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_PlaceholderGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_SearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_Hits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_SearchResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_FlushRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_PersistentSegmentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetPersistentSegmentInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetPersistentSegmentInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_QuerySegmentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetQuerySegmentInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_GetQuerySegmentInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_RegisterLinkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::milvus::_RegisterLinkResponse_default_instance_),
};

const char descriptor_table_protodef_milvus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014milvus.proto\022\023milvus.proto.milvus\032\014com"
  "mon.proto\032\014schema.proto\"\177\n\027CreateCollect"
  "ionRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto."
  "common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017colle"
  "ction_name\030\003 \001(\t\022\016\n\006schema\030\004 \001(\014\"m\n\025Drop"
  "CollectionRequest\022*\n\004base\030\001 \001(\0132\034.milvus"
  ".proto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027"
  "\n\017collection_name\030\003 \001(\t\"l\n\024HasCollection"
  "Request\022*\n\004base\030\001 \001(\0132\034.milvus.proto.com"
  "mon.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collecti"
  "on_name\030\003 \001(\t\"J\n\014BoolResponse\022+\n\006status\030"
  "\001 \001(\0132\033.milvus.proto.common.Status\022\r\n\005va"
  "lue\030\002 \001(\010\"L\n\016StringResponse\022+\n\006status\030\001 "
  "\001(\0132\033.milvus.proto.common.Status\022\r\n\005valu"
  "e\030\002 \001(\t\"\207\001\n\031DescribeCollectionRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003 "
  "\001(\t\022\024\n\014collectionID\030\004 \001(\003\"\226\001\n\032DescribeCo"
  "llectionResponse\022+\n\006status\030\001 \001(\0132\033.milvu"
  "s.proto.common.Status\0225\n\006schema\030\002 \001(\0132%."
  "milvus.proto.schema.CollectionSchema\022\024\n\014"
  "collectionID\030\003 \001(\003\"m\n\025LoadCollectionRequ"
  "est\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common."
  "MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_n"
  "ame\030\003 \001(\t\"p\n\030ReleaseCollectionRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003 "
  "\001(\t\"v\n\036GetCollectionStatisticsRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003 "
  "\001(\t\"\200\001\n\037GetCollectionStatisticsResponse\022"
  "+\n\006status\030\001 \001(\0132\033.milvus.proto.common.St"
  "atus\0220\n\005stats\030\002 \003(\0132!.milvus.proto.commo"
  "n.KeyValuePair\"U\n\026ShowCollectionsRequest"
  "\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.Msg"
  "Base\022\017\n\007db_name\030\002 \001(\t\"`\n\027ShowCollections"
  "Response\022+\n\006status\030\001 \001(\0132\033.milvus.proto."
  "common.Status\022\030\n\020collection_names\030\002 \003(\t\""
  "\206\001\n\026CreatePartitionRequest\022*\n\004base\030\001 \001(\013"
  "2\034.milvus.proto.common.MsgBase\022\017\n\007db_nam"
  "e\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\026\n\016part"
  "ition_name\030\004 \001(\t\"\204\001\n\024DropPartitionReques"
  "t\022*\n\004base\030\001 \001(\0132\034.milvus.proto.common.Ms"
  "gBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_nam"
  "e\030\003 \001(\t\022\026\n\016partition_name\030\004 \001(\t\"\203\001\n\023HasP"
  "artitionRequest\022*\n\004base\030\001 \001(\0132\034.milvus.p"
  "roto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017"
  "collection_name\030\003 \001(\t\022\026\n\016partition_name\030"
  "\004 \001(\t\"\206\001\n\025LoadPartitionsRequest\022*\n\004base\030"
  "\001 \001(\0132\034.milvus.proto.common.MsgBase\022\017\n\007d"
  "b_name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\027\n"
  "\017partition_names\030\004 \003(\t\"\211\001\n\030ReleasePartit"
  "ionsRequest\022*\n\004base\030\001 \001(\0132\034.milvus.proto"
  ".common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017coll"
  "ection_name\030\003 \001(\t\022\027\n\017partition_names\030\004 \003"
  "(\t\"\215\001\n\035GetPartitionStatisticsRequest\022*\n\004"
  "base\030\001 \001(\0132\034.milvus.proto.common.MsgBase"
  "\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003 \001"
  "(\t\022\026\n\016partition_name\030\004 \001(\t\"\177\n\036GetPartiti"
  "onStatisticsResponse\022+\n\006status\030\001 \001(\0132\033.m"
  "ilvus.proto.common.Status\0220\n\005stats\030\002 \003(\013"
  "2!.milvus.proto.common.KeyValuePair\"\203\001\n\025"
  "ShowPartitionsRequest\022*\n\004base\030\001 \001(\0132\034.mi"
  "lvus.proto.common.MsgBase\022\017\n\007db_name\030\002 \001"
  "(\t\022\027\n\017collection_name\030\003 \001(\t\022\024\n\014collectio"
  "nID\030\004 \001(\003\"t\n\026ShowPartitionsResponse\022+\n\006s"
  "tatus\030\001 \001(\0132\033.milvus.proto.common.Status"
  "\022\027\n\017partition_names\030\002 \003(\t\022\024\n\014partitionID"
  "s\030\003 \003(\003\"m\n\026DescribeSegmentRequest\022*\n\004bas"
  "e\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022\024\n"
  "\014collectionID\030\002 \001(\003\022\021\n\tsegmentID\030\003 \001(\003\"~"
  "\n\027DescribeSegmentResponse\022+\n\006status\030\001 \001("
  "\0132\033.milvus.proto.common.Status\022\017\n\007indexI"
  "D\030\002 \001(\003\022\017\n\007buildID\030\003 \001(\003\022\024\n\014enable_index"
  "\030\004 \001(\010\"l\n\023ShowSegmentsRequest\022*\n\004base\030\001 "
  "\001(\0132\034.milvus.proto.common.MsgBase\022\024\n\014col"
  "lectionID\030\002 \001(\003\022\023\n\013partitionID\030\003 \001(\003\"W\n\024"
  "ShowSegmentsResponse\022+\n\006status\030\001 \001(\0132\033.m"
  "ilvus.proto.common.Status\022\022\n\nsegmentIDs\030"
  "\002 \003(\003\"\267\001\n\022CreateIndexRequest\022*\n\004base\030\001 \001"
  "(\0132\034.milvus.proto.common.MsgBase\022\017\n\007db_n"
  "ame\030\002 \001(\t\022\027\n\017collection_name\030\003 \001(\t\022\022\n\nfi"
  "eld_name\030\004 \001(\t\0227\n\014extra_params\030\005 \003(\0132!.m"
  "ilvus.proto.common.KeyValuePair\"\224\001\n\024Desc"
  "ribeIndexRequest\022*\n\004base\030\001 \001(\0132\034.milvus."
  "proto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n"
  "\017collection_name\030\003 \001(\t\022\022\n\nfield_name\030\004 \001"
  "(\t\022\022\n\nindex_name\030\005 \001(\t\"j\n\020IndexDescripti"
  "on\022\022\n\nindex_name\030\001 \001(\t\022\017\n\007indexID\030\002 \001(\003\022"
  "1\n\006params\030\003 \003(\0132!.milvus.proto.common.Ke"
  "yValuePair\"\207\001\n\025DescribeIndexResponse\022+\n\006"
  "status\030\001 \001(\0132\033.milvus.proto.common.Statu"
  "s\022A\n\022index_descriptions\030\002 \003(\0132%.milvus.p"
  "roto.milvus.IndexDescription\"\224\001\n\024GetInde"
  "xStateRequest\022*\n\004base\030\001 \001(\0132\034.milvus.pro"
  "to.common.MsgBase\022\017\n\007db_name\030\002 \001(\t\022\027\n\017co"
  "llection_name\030\003 \001(\t\022\022\n\nfield_name\030\004 \001(\t\022"
  "\022\n\nindex_name\030\005 \001(\t\"t\n\025GetIndexStateResp"
  "onse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.comm"
  "on.Status\022.\n\005state\030\002 \001(\0162\037.milvus.proto."
  "common.IndexState\"\220\001\n\020DropIndexRequest\022*"
  "\n\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBa"
  "se\022\017\n\007db_name\030\002 \001(\t\022\027\n\017collection_name\030\003"
  " \001(\t\022\022\n\nfield_name\030\004 \001(\t\022\022\n\nindex_name\030\005"
  " \001(\t\"\275\001\n\rInsertRequest\022*\n\004base\030\001 \001(\0132\034.m"
  "ilvus.proto.common.MsgBase\022\017\n\007db_name\030\002 "
  "\001(\t\022\027\n\017collection_name\030\003 \001(\t\022\026\n\016partitio"
  "n_name\030\004 \001(\t\022+\n\010row_data\030\005 \003(\0132\031.milvus."
  "proto.common.Blob\022\021\n\thash_keys\030\006 \003(\r\"e\n\016"
  "InsertResponse\022+\n\006status\030\001 \001(\0132\033.milvus."
  "proto.common.Status\022\023\n\013rowID_begin\030\002 \001(\003"
  "\022\021\n\trowID_end\030\003 \001(\003\"c\n\020PlaceholderValue\022"
  "\013\n\003tag\030\001 \001(\t\0222\n\004type\030\002 \001(\0162$.milvus.prot"
  "o.milvus.PlaceholderType\022\016\n\006values\030\003 \003(\014"
  "\"O\n\020PlaceholderGroup\022;\n\014placeholders\030\001 \003"
  "(\0132%.milvus.proto.milvus.PlaceholderValu"
  "e\"\246\001\n\rSearchRequest\022*\n\004base\030\001 \001(\0132\034.milv"
  "us.proto.common.MsgBase\022\017\n\007db_name\030\002 \001(\t"
  "\022\027\n\017collection_name\030\003 \001(\t\022\027\n\017partition_n"
  "ames\030\004 \003(\t\022\013\n\003dsl\030\005 \001(\t\022\031\n\021placeholder_g"
  "roup\030\006 \001(\014\"5\n\004Hits\022\013\n\003IDs\030\001 \003(\003\022\020\n\010row_d"
  "ata\030\002 \003(\014\022\016\n\006scores\030\003 \003(\002\"J\n\rSearchResul"
  "ts\022+\n\006status\030\001 \001(\0132\033.milvus.proto.common"
  ".Status\022\014\n\004hits\030\002 \003(\014\"e\n\014FlushRequest\022*\n"
  "\004base\030\001 \001(\0132\034.milvus.proto.common.MsgBas"
  "e\022\017\n\007db_name\030\002 \001(\t\022\030\n\020collection_names\030\003"
  " \003(\t\"\351\001\n\025PersistentSegmentInfo\022\021\n\tsegmen"
  "tID\030\001 \001(\003\022\024\n\014collectionID\030\002 \001(\003\022\023\n\013parti"
  "tionID\030\003 \001(\003\022\021\n\topen_time\030\004 \001(\004\022\023\n\013seale"
  "d_time\030\005 \001(\004\022\024\n\014flushed_time\030\006 \001(\004\022\020\n\010nu"
  "m_rows\030\007 \001(\003\022\020\n\010mem_size\030\010 \001(\003\0220\n\005state\030"
  "\t \001(\0162!.milvus.proto.common.SegmentState"
  "\"u\n\037GetPersistentSegmentInfoRequest\022*\n\004b"
  "ase\030\001 \001(\0132\034.milvus.proto.common.MsgBase\022"
  "\016\n\006dbName\030\002 \001(\t\022\026\n\016collectionName\030\003 \001(\t\""
  "\212\001\n GetPersistentSegmentInfoResponse\022+\n\006"
  "status\030\001 \001(\0132\033.milvus.proto.common.Statu"
  "s\0229\n\005infos\030\002 \003(\0132*.milvus.proto.milvus.P"
  "ersistentSegmentInfo\"\231\001\n\020QuerySegmentInf"
  "o\022\021\n\tsegmentID\030\001 \001(\003\022\024\n\014collectionID\030\002 \001"
  "(\003\022\023\n\013partitionID\030\003 \001(\003\022\020\n\010mem_size\030\004 \001("
  "\003\022\020\n\010num_rows\030\005 \001(\003\022\022\n\nindex_name\030\006 \001(\t\022"
  "\017\n\007indexID\030\007 \001(\003\"p\n\032GetQuerySegmentInfoR"
  "equest\022*\n\004base\030\001 \001(\0132\034.milvus.proto.comm"
  "on.MsgBase\022\016\n\006dbName\030\002 \001(\t\022\026\n\016collection"
  "Name\030\003 \001(\t\"\200\001\n\033GetQuerySegmentInfoRespon"
  "se\022+\n\006status\030\001 \001(\0132\033.milvus.proto.common"
  ".Status\0224\n\005infos\030\002 \003(\0132%.milvus.proto.mi"
  "lvus.QuerySegmentInfo\"\025\n\023RegisterLinkReq"
  "uest\"r\n\024RegisterLinkResponse\022-\n\007address\030"
  "\001 \001(\0132\034.milvus.proto.common.Address\022+\n\006s"
  "tatus\030\002 \001(\0132\033.milvus.proto.common.Status"
  "*>\n\017PlaceholderType\022\010\n\004None\020\000\022\020\n\014BinaryV"
  "ector\020d\022\017\n\013FloatVector\020e2\215\024\n\rMilvusServi"
  "ce\022_\n\020CreateCollection\022,.milvus.proto.mi"
  "lvus.CreateCollectionRequest\032\033.milvus.pr"
  "oto.common.Status\"\000\022[\n\016DropCollection\022*."
  "milvus.proto.milvus.DropCollectionReques"
  "t\032\033.milvus.proto.common.Status\"\000\022_\n\rHasC"
  "ollection\022).milvus.proto.milvus.HasColle"
  "ctionRequest\032!.milvus.proto.milvus.BoolR"
  "esponse\"\000\022[\n\016LoadCollection\022*.milvus.pro"
  "to.milvus.LoadCollectionRequest\032\033.milvus"
  ".proto.common.Status\"\000\022a\n\021ReleaseCollect"
  "ion\022-.milvus.proto.milvus.ReleaseCollect"
  "ionRequest\032\033.milvus.proto.common.Status\""
  "\000\022w\n\022DescribeCollection\022..milvus.proto.m"
  "ilvus.DescribeCollectionRequest\032/.milvus"
  ".proto.milvus.DescribeCollectionResponse"
  "\"\000\022\206\001\n\027GetCollectionStatistics\0223.milvus."
  "proto.milvus.GetCollectionStatisticsRequ"
  "est\0324.milvus.proto.milvus.GetCollectionS"
  "tatisticsResponse\"\000\022n\n\017ShowCollections\022+"
  ".milvus.proto.milvus.ShowCollectionsRequ"
  "est\032,.milvus.proto.milvus.ShowCollection"
  "sResponse\"\000\022]\n\017CreatePartition\022+.milvus."
  "proto.milvus.CreatePartitionRequest\032\033.mi"
  "lvus.proto.common.Status\"\000\022Y\n\rDropPartit"
  "ion\022).milvus.proto.milvus.DropPartitionR"
  "equest\032\033.milvus.proto.common.Status\"\000\022]\n"
  "\014HasPartition\022(.milvus.proto.milvus.HasP"
  "artitionRequest\032!.milvus.proto.milvus.Bo"
  "olResponse\"\000\022[\n\016LoadPartitions\022*.milvus."
  "proto.milvus.LoadPartitionsRequest\032\033.mil"
  "vus.proto.common.Status\"\000\022a\n\021ReleasePart"
  "itions\022-.milvus.proto.milvus.ReleasePart"
  "itionsRequest\032\033.milvus.proto.common.Stat"
  "us\"\000\022\203\001\n\026GetPartitionStatistics\0222.milvus"
  ".proto.milvus.GetPartitionStatisticsRequ"
  "est\0323.milvus.proto.milvus.GetPartitionSt"
  "atisticsResponse\"\000\022k\n\016ShowPartitions\022*.m"
  "ilvus.proto.milvus.ShowPartitionsRequest"
  "\032+.milvus.proto.milvus.ShowPartitionsRes"
  "ponse\"\000\022U\n\013CreateIndex\022\'.milvus.proto.mi"
  "lvus.CreateIndexRequest\032\033.milvus.proto.c"
  "ommon.Status\"\000\022h\n\rDescribeIndex\022).milvus"
  ".proto.milvus.DescribeIndexRequest\032*.mil"
  "vus.proto.milvus.DescribeIndexResponse\"\000"
  "\022h\n\rGetIndexState\022).milvus.proto.milvus."
  "GetIndexStateRequest\032*.milvus.proto.milv"
  "us.GetIndexStateResponse\"\000\022Q\n\tDropIndex\022"
  "%.milvus.proto.milvus.DropIndexRequest\032\033"
  ".milvus.proto.common.Status\"\000\022S\n\006Insert\022"
  "\".milvus.proto.milvus.InsertRequest\032#.mi"
  "lvus.proto.milvus.InsertResponse\"\000\022R\n\006Se"
  "arch\022\".milvus.proto.milvus.SearchRequest"
  "\032\".milvus.proto.milvus.SearchResults\"\000\022I"
  "\n\005Flush\022!.milvus.proto.milvus.FlushReque"
  "st\032\033.milvus.proto.common.Status\"\000\022\211\001\n\030Ge"
  "tPersistentSegmentInfo\0224.milvus.proto.mi"
  "lvus.GetPersistentSegmentInfoRequest\0325.m"
  "ilvus.proto.milvus.GetPersistentSegmentI"
  "nfoResponse\"\000\022z\n\023GetQuerySegmentInfo\022/.m"
  "ilvus.proto.milvus.GetQuerySegmentInfoRe"
  "quest\0320.milvus.proto.milvus.GetQuerySegm"
  "entInfoResponse\"\000\022e\n\014RegisterLink\022(.milv"
  "us.proto.milvus.RegisterLinkRequest\032).mi"
  "lvus.proto.milvus.RegisterLinkResponse\"\000"
  "2u\n\014ProxyService\022e\n\014RegisterLink\022(.milvu"
  "s.proto.milvus.RegisterLinkRequest\032).mil"
  "vus.proto.milvus.RegisterLinkResponse\"\000B"
  "5Z3github.com/milvus-io/milvus/internal/"
  "proto/milvuspbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_milvus_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_schema_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_milvus_2eproto_sccs[49] = {
  &scc_info_BoolResponse_milvus_2eproto.base,
  &scc_info_CreateCollectionRequest_milvus_2eproto.base,
  &scc_info_CreateIndexRequest_milvus_2eproto.base,
  &scc_info_CreatePartitionRequest_milvus_2eproto.base,
  &scc_info_DescribeCollectionRequest_milvus_2eproto.base,
  &scc_info_DescribeCollectionResponse_milvus_2eproto.base,
  &scc_info_DescribeIndexRequest_milvus_2eproto.base,
  &scc_info_DescribeIndexResponse_milvus_2eproto.base,
  &scc_info_DescribeSegmentRequest_milvus_2eproto.base,
  &scc_info_DescribeSegmentResponse_milvus_2eproto.base,
  &scc_info_DropCollectionRequest_milvus_2eproto.base,
  &scc_info_DropIndexRequest_milvus_2eproto.base,
  &scc_info_DropPartitionRequest_milvus_2eproto.base,
  &scc_info_FlushRequest_milvus_2eproto.base,
  &scc_info_GetCollectionStatisticsRequest_milvus_2eproto.base,
  &scc_info_GetCollectionStatisticsResponse_milvus_2eproto.base,
  &scc_info_GetIndexStateRequest_milvus_2eproto.base,
  &scc_info_GetIndexStateResponse_milvus_2eproto.base,
  &scc_info_GetPartitionStatisticsRequest_milvus_2eproto.base,
  &scc_info_GetPartitionStatisticsResponse_milvus_2eproto.base,
  &scc_info_GetPersistentSegmentInfoRequest_milvus_2eproto.base,
  &scc_info_GetPersistentSegmentInfoResponse_milvus_2eproto.base,
  &scc_info_GetQuerySegmentInfoRequest_milvus_2eproto.base,
  &scc_info_GetQuerySegmentInfoResponse_milvus_2eproto.base,
  &scc_info_HasCollectionRequest_milvus_2eproto.base,
  &scc_info_HasPartitionRequest_milvus_2eproto.base,
  &scc_info_Hits_milvus_2eproto.base,
  &scc_info_IndexDescription_milvus_2eproto.base,
  &scc_info_InsertRequest_milvus_2eproto.base,
  &scc_info_InsertResponse_milvus_2eproto.base,
  &scc_info_LoadCollectionRequest_milvus_2eproto.base,
  &scc_info_LoadPartitionsRequest_milvus_2eproto.base,
  &scc_info_PersistentSegmentInfo_milvus_2eproto.base,
  &scc_info_PlaceholderGroup_milvus_2eproto.base,
  &scc_info_PlaceholderValue_milvus_2eproto.base,
  &scc_info_QuerySegmentInfo_milvus_2eproto.base,
  &scc_info_RegisterLinkRequest_milvus_2eproto.base,
  &scc_info_RegisterLinkResponse_milvus_2eproto.base,
  &scc_info_ReleaseCollectionRequest_milvus_2eproto.base,
  &scc_info_ReleasePartitionsRequest_milvus_2eproto.base,
  &scc_info_SearchRequest_milvus_2eproto.base,
  &scc_info_SearchResults_milvus_2eproto.base,
  &scc_info_ShowCollectionsRequest_milvus_2eproto.base,
  &scc_info_ShowCollectionsResponse_milvus_2eproto.base,
  &scc_info_ShowPartitionsRequest_milvus_2eproto.base,
  &scc_info_ShowPartitionsResponse_milvus_2eproto.base,
  &scc_info_ShowSegmentsRequest_milvus_2eproto.base,
  &scc_info_ShowSegmentsResponse_milvus_2eproto.base,
  &scc_info_StringResponse_milvus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_milvus_2eproto_once;
static bool descriptor_table_milvus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_milvus_2eproto = {
  &descriptor_table_milvus_2eproto_initialized, descriptor_table_protodef_milvus_2eproto, "milvus.proto", 8902,
  &descriptor_table_milvus_2eproto_once, descriptor_table_milvus_2eproto_sccs, descriptor_table_milvus_2eproto_deps, 49, 2,
  schemas, file_default_instances, TableStruct_milvus_2eproto::offsets,
  file_level_metadata_milvus_2eproto, 49, file_level_enum_descriptors_milvus_2eproto, file_level_service_descriptors_milvus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_milvus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_milvus_2eproto), true);
namespace milvus {
namespace proto {
namespace milvus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceholderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_milvus_2eproto);
  return file_level_enum_descriptors_milvus_2eproto[0];
}
bool PlaceholderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CreateCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CreateCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class CreateCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateCollectionRequest::_Internal::base(const CreateCollectionRequest* msg) {
  return *msg->base_;
}
void CreateCollectionRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
CreateCollectionRequest::CreateCollectionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.CreateCollectionRequest)
}
CreateCollectionRequest::CreateCollectionRequest(const CreateCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.schema().empty()) {
    schema_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.schema_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateCollectionRequest)
}

void CreateCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

CreateCollectionRequest::~CreateCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateCollectionRequest)
  SharedDtor();
}

void CreateCollectionRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void CreateCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateCollectionRequest& CreateCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CreateCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.CreateCollectionRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.CreateCollectionRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes schema = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_schema(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateCollectionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.CreateCollectionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.CreateCollectionRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.CreateCollectionRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes schema = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.CreateCollectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.CreateCollectionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateCollectionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.CreateCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateCollectionRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateCollectionRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // bytes schema = 4;
  if (this->schema().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->schema(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.CreateCollectionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCollectionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateCollectionRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateCollectionRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // bytes schema = 4;
  if (this->schema().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->schema(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateCollectionRequest)
  return target;
}

size_t CreateCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateCollectionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // bytes schema = 4;
  if (this->schema().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->schema());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CreateCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CreateCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CreateCollectionRequest)
    MergeFrom(*source);
  }
}

void CreateCollectionRequest::MergeFrom(const CreateCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.schema().size() > 0) {

    schema_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.schema_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void CreateCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CreateCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCollectionRequest::CopyFrom(const CreateCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCollectionRequest::IsInitialized() const {
  return true;
}

void CreateCollectionRequest::InternalSwap(CreateCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schema_.Swap(&other->schema_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DropCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DropCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropCollectionRequest::_Internal::base(const DropCollectionRequest* msg) {
  return *msg->base_;
}
void DropCollectionRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DropCollectionRequest::DropCollectionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.DropCollectionRequest)
}
DropCollectionRequest::DropCollectionRequest(const DropCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropCollectionRequest)
}

void DropCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DropCollectionRequest::~DropCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropCollectionRequest)
  SharedDtor();
}

void DropCollectionRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DropCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropCollectionRequest& DropCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DropCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DropCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.DropCollectionRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.DropCollectionRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DropCollectionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.DropCollectionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DropCollectionRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DropCollectionRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.DropCollectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.DropCollectionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DropCollectionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.DropCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropCollectionRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropCollectionRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.DropCollectionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DropCollectionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropCollectionRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropCollectionRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropCollectionRequest)
  return target;
}

size_t DropCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropCollectionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DropCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DropCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DropCollectionRequest)
    MergeFrom(*source);
  }
}

void DropCollectionRequest::MergeFrom(const DropCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void DropCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DropCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropCollectionRequest::CopyFrom(const DropCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropCollectionRequest::IsInitialized() const {
  return true;
}

void DropCollectionRequest::InternalSwap(DropCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HasCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_HasCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class HasCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const HasCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
HasCollectionRequest::_Internal::base(const HasCollectionRequest* msg) {
  return *msg->base_;
}
void HasCollectionRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
HasCollectionRequest::HasCollectionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.HasCollectionRequest)
}
HasCollectionRequest::HasCollectionRequest(const HasCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.HasCollectionRequest)
}

void HasCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HasCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

HasCollectionRequest::~HasCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.HasCollectionRequest)
  SharedDtor();
}

void HasCollectionRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void HasCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HasCollectionRequest& HasCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HasCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void HasCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.HasCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HasCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.HasCollectionRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.HasCollectionRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HasCollectionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.HasCollectionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.HasCollectionRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.HasCollectionRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.HasCollectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.HasCollectionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HasCollectionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.HasCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasCollectionRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasCollectionRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.HasCollectionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* HasCollectionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.HasCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasCollectionRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasCollectionRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.HasCollectionRequest)
  return target;
}

size_t HasCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.HasCollectionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HasCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.HasCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HasCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HasCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.HasCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.HasCollectionRequest)
    MergeFrom(*source);
  }
}

void HasCollectionRequest::MergeFrom(const HasCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.HasCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void HasCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.HasCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HasCollectionRequest::CopyFrom(const HasCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.HasCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasCollectionRequest::IsInitialized() const {
  return true;
}

void HasCollectionRequest::InternalSwap(HasCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HasCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoolResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_BoolResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class BoolResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const BoolResponse* msg);
};

const ::milvus::proto::common::Status&
BoolResponse::_Internal::status(const BoolResponse* msg) {
  return *msg->status_;
}
void BoolResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BoolResponse::BoolResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.BoolResponse)
}
BoolResponse::BoolResponse(const BoolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.BoolResponse)
}

void BoolResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoolResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&status_)) + sizeof(value_));
}

BoolResponse::~BoolResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.BoolResponse)
  SharedDtor();
}

void BoolResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void BoolResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoolResponse& BoolResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoolResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void BoolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.BoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  value_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoolResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoolResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.BoolResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.BoolResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.BoolResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoolResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.BoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // bool value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.BoolResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.BoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // bool value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.BoolResponse)
  return target;
}

size_t BoolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.BoolResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool value = 2;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.BoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoolResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.BoolResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.BoolResponse)
    MergeFrom(*source);
  }
}

void BoolResponse::MergeFrom(const BoolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.BoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void BoolResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.BoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolResponse::CopyFrom(const BoolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.BoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolResponse::IsInitialized() const {
  return true;
}

void BoolResponse::InternalSwap(BoolResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StringResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_StringResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class StringResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const StringResponse* msg);
};

const ::milvus::proto::common::Status&
StringResponse::_Internal::status(const StringResponse* msg) {
  return *msg->status_;
}
void StringResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
StringResponse::StringResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.StringResponse)
}
StringResponse::StringResponse(const StringResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.StringResponse)
}

void StringResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringResponse_milvus_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

StringResponse::~StringResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.StringResponse)
  SharedDtor();
}

void StringResponse::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void StringResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringResponse& StringResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void StringResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.StringResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "milvus.proto.milvus.StringResponse.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.StringResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.StringResponse.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.StringResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.StringResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.StringResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.StringResponse.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.StringResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* StringResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.StringResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.StringResponse.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.StringResponse)
  return target;
}

size_t StringResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.StringResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.StringResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StringResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.StringResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.StringResponse)
    MergeFrom(*source);
  }
}

void StringResponse::MergeFrom(const StringResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.StringResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
}

void StringResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.StringResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringResponse::CopyFrom(const StringResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.StringResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringResponse::IsInitialized() const {
  return true;
}

void StringResponse::InternalSwap(StringResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DescribeCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeCollectionRequest::_Internal::base(const DescribeCollectionRequest* msg) {
  return *msg->base_;
}
void DescribeCollectionRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DescribeCollectionRequest::DescribeCollectionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.DescribeCollectionRequest)
}
DescribeCollectionRequest::DescribeCollectionRequest(const DescribeCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  collectionid_ = from.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeCollectionRequest)
}

void DescribeCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collectionid_) -
      reinterpret_cast<char*>(&base_)) + sizeof(collectionid_));
}

DescribeCollectionRequest::~DescribeCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeCollectionRequest)
  SharedDtor();
}

void DescribeCollectionRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DescribeCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeCollectionRequest& DescribeCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  collectionid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DescribeCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.DescribeCollectionRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.DescribeCollectionRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DescribeCollectionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.DescribeCollectionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DescribeCollectionRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DescribeCollectionRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 collectionID = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &collectionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.DescribeCollectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.DescribeCollectionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DescribeCollectionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.DescribeCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // int64 collectionID = 4;
  if (this->collectionid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->collectionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.DescribeCollectionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeCollectionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeCollectionRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // int64 collectionID = 4;
  if (this->collectionid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->collectionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeCollectionRequest)
  return target;
}

size_t DescribeCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeCollectionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int64 collectionID = 4;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->collectionid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeCollectionRequest)
    MergeFrom(*source);
  }
}

void DescribeCollectionRequest::MergeFrom(const DescribeCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
  if (from.collectionid() != 0) {
    set_collectionid(from.collectionid());
  }
}

void DescribeCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeCollectionRequest::CopyFrom(const DescribeCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeCollectionRequest::IsInitialized() const {
  return true;
}

void DescribeCollectionRequest::InternalSwap(DescribeCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
  swap(collectionid_, other->collectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeCollectionResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeCollectionResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
  ::milvus::proto::milvus::_DescribeCollectionResponse_default_instance_._instance.get_mutable()->schema_ = const_cast< ::milvus::proto::schema::CollectionSchema*>(
      ::milvus::proto::schema::CollectionSchema::internal_default_instance());
}
class DescribeCollectionResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeCollectionResponse* msg);
  static const ::milvus::proto::schema::CollectionSchema& schema(const DescribeCollectionResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeCollectionResponse::_Internal::status(const DescribeCollectionResponse* msg) {
  return *msg->status_;
}
const ::milvus::proto::schema::CollectionSchema&
DescribeCollectionResponse::_Internal::schema(const DescribeCollectionResponse* msg) {
  return *msg->schema_;
}
void DescribeCollectionResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void DescribeCollectionResponse::clear_schema() {
  if (GetArenaNoVirtual() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
}
DescribeCollectionResponse::DescribeCollectionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.DescribeCollectionResponse)
}
DescribeCollectionResponse::DescribeCollectionResponse(const DescribeCollectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_schema()) {
    schema_ = new ::milvus::proto::schema::CollectionSchema(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  collectionid_ = from.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeCollectionResponse)
}

void DescribeCollectionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeCollectionResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collectionid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(collectionid_));
}

DescribeCollectionResponse::~DescribeCollectionResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeCollectionResponse)
  SharedDtor();
}

void DescribeCollectionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete schema_;
}

void DescribeCollectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeCollectionResponse& DescribeCollectionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeCollectionResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeCollectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeCollectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
  collectionid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DescribeCollectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.schema.CollectionSchema schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DescribeCollectionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.DescribeCollectionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .milvus.proto.schema.CollectionSchema schema = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 collectionID = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &collectionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.DescribeCollectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.DescribeCollectionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DescribeCollectionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.DescribeCollectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .milvus.proto.schema.CollectionSchema schema = 2;
  if (this->has_schema()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::schema(this), output);
  }

  // int64 collectionID = 3;
  if (this->collectionid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->collectionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.DescribeCollectionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeCollectionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeCollectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .milvus.proto.schema.CollectionSchema schema = 2;
  if (this->has_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::schema(this), target);
  }

  // int64 collectionID = 3;
  if (this->collectionid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->collectionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeCollectionResponse)
  return target;
}

size_t DescribeCollectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeCollectionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .milvus.proto.schema.CollectionSchema schema = 2;
  if (this->has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  // int64 collectionID = 3;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->collectionid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeCollectionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeCollectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeCollectionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeCollectionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeCollectionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeCollectionResponse)
    MergeFrom(*source);
  }
}

void DescribeCollectionResponse::MergeFrom(const DescribeCollectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeCollectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
  if (from.has_schema()) {
    mutable_schema()->::milvus::proto::schema::CollectionSchema::MergeFrom(from.schema());
  }
  if (from.collectionid() != 0) {
    set_collectionid(from.collectionid());
  }
}

void DescribeCollectionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeCollectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeCollectionResponse::CopyFrom(const DescribeCollectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeCollectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeCollectionResponse::IsInitialized() const {
  return true;
}

void DescribeCollectionResponse::InternalSwap(DescribeCollectionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(schema_, other->schema_);
  swap(collectionid_, other->collectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeCollectionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_LoadCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class LoadCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const LoadCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
LoadCollectionRequest::_Internal::base(const LoadCollectionRequest* msg) {
  return *msg->base_;
}
void LoadCollectionRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
LoadCollectionRequest::LoadCollectionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.LoadCollectionRequest)
}
LoadCollectionRequest::LoadCollectionRequest(const LoadCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.LoadCollectionRequest)
}

void LoadCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

LoadCollectionRequest::~LoadCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.LoadCollectionRequest)
  SharedDtor();
}

void LoadCollectionRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void LoadCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadCollectionRequest& LoadCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void LoadCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.LoadCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoadCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.LoadCollectionRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.LoadCollectionRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoadCollectionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.LoadCollectionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.LoadCollectionRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.LoadCollectionRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.LoadCollectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.LoadCollectionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoadCollectionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.LoadCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadCollectionRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadCollectionRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.LoadCollectionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadCollectionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.LoadCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadCollectionRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadCollectionRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.LoadCollectionRequest)
  return target;
}

size_t LoadCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.LoadCollectionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.LoadCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.LoadCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.LoadCollectionRequest)
    MergeFrom(*source);
  }
}

void LoadCollectionRequest::MergeFrom(const LoadCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.LoadCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void LoadCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.LoadCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadCollectionRequest::CopyFrom(const LoadCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.LoadCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadCollectionRequest::IsInitialized() const {
  return true;
}

void LoadCollectionRequest::InternalSwap(LoadCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseCollectionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ReleaseCollectionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ReleaseCollectionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ReleaseCollectionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ReleaseCollectionRequest::_Internal::base(const ReleaseCollectionRequest* msg) {
  return *msg->base_;
}
void ReleaseCollectionRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ReleaseCollectionRequest::ReleaseCollectionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.ReleaseCollectionRequest)
}
ReleaseCollectionRequest::ReleaseCollectionRequest(const ReleaseCollectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ReleaseCollectionRequest)
}

void ReleaseCollectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseCollectionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

ReleaseCollectionRequest::~ReleaseCollectionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ReleaseCollectionRequest)
  SharedDtor();
}

void ReleaseCollectionRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ReleaseCollectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseCollectionRequest& ReleaseCollectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseCollectionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ReleaseCollectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ReleaseCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReleaseCollectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.ReleaseCollectionRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.ReleaseCollectionRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReleaseCollectionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.ReleaseCollectionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.ReleaseCollectionRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.ReleaseCollectionRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.ReleaseCollectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.ReleaseCollectionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReleaseCollectionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.ReleaseCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleaseCollectionRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleaseCollectionRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.ReleaseCollectionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseCollectionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ReleaseCollectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleaseCollectionRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleaseCollectionRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ReleaseCollectionRequest)
  return target;
}

size_t ReleaseCollectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ReleaseCollectionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseCollectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ReleaseCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseCollectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseCollectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ReleaseCollectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ReleaseCollectionRequest)
    MergeFrom(*source);
  }
}

void ReleaseCollectionRequest::MergeFrom(const ReleaseCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ReleaseCollectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void ReleaseCollectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ReleaseCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseCollectionRequest::CopyFrom(const ReleaseCollectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ReleaseCollectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseCollectionRequest::IsInitialized() const {
  return true;
}

void ReleaseCollectionRequest::InternalSwap(ReleaseCollectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseCollectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollectionStatisticsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetCollectionStatisticsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetCollectionStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetCollectionStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetCollectionStatisticsRequest::_Internal::base(const GetCollectionStatisticsRequest* msg) {
  return *msg->base_;
}
void GetCollectionStatisticsRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetCollectionStatisticsRequest::GetCollectionStatisticsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.GetCollectionStatisticsRequest)
}
GetCollectionStatisticsRequest::GetCollectionStatisticsRequest(const GetCollectionStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCollectionStatisticsRequest)
}

void GetCollectionStatisticsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCollectionStatisticsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetCollectionStatisticsRequest::~GetCollectionStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCollectionStatisticsRequest)
  SharedDtor();
}

void GetCollectionStatisticsRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetCollectionStatisticsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollectionStatisticsRequest& GetCollectionStatisticsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollectionStatisticsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetCollectionStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCollectionStatisticsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.GetCollectionStatisticsRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCollectionStatisticsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetCollectionStatisticsRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.GetCollectionStatisticsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.GetCollectionStatisticsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCollectionStatisticsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetCollectionStatisticsRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.GetCollectionStatisticsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollectionStatisticsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetCollectionStatisticsRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetCollectionStatisticsRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCollectionStatisticsRequest)
  return target;
}

size_t GetCollectionStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollectionStatisticsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollectionStatisticsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollectionStatisticsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetCollectionStatisticsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetCollectionStatisticsRequest)
    MergeFrom(*source);
  }
}

void GetCollectionStatisticsRequest::MergeFrom(const GetCollectionStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void GetCollectionStatisticsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollectionStatisticsRequest::CopyFrom(const GetCollectionStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCollectionStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectionStatisticsRequest::IsInitialized() const {
  return true;
}

void GetCollectionStatisticsRequest::InternalSwap(GetCollectionStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectionStatisticsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollectionStatisticsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetCollectionStatisticsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetCollectionStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetCollectionStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetCollectionStatisticsResponse::_Internal::status(const GetCollectionStatisticsResponse* msg) {
  return *msg->status_;
}
void GetCollectionStatisticsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetCollectionStatisticsResponse::clear_stats() {
  stats_.Clear();
}
GetCollectionStatisticsResponse::GetCollectionStatisticsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.GetCollectionStatisticsResponse)
}
GetCollectionStatisticsResponse::GetCollectionStatisticsResponse(const GetCollectionStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetCollectionStatisticsResponse)
}

void GetCollectionStatisticsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCollectionStatisticsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

GetCollectionStatisticsResponse::~GetCollectionStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetCollectionStatisticsResponse)
  SharedDtor();
}

void GetCollectionStatisticsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GetCollectionStatisticsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollectionStatisticsResponse& GetCollectionStatisticsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollectionStatisticsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetCollectionStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCollectionStatisticsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCollectionStatisticsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.proto.common.KeyValuePair stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.GetCollectionStatisticsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.GetCollectionStatisticsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCollectionStatisticsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.GetCollectionStatisticsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollectionStatisticsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stats(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetCollectionStatisticsResponse)
  return target;
}

size_t GetCollectionStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollectionStatisticsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollectionStatisticsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollectionStatisticsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetCollectionStatisticsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetCollectionStatisticsResponse)
    MergeFrom(*source);
  }
}

void GetCollectionStatisticsResponse::MergeFrom(const GetCollectionStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
}

void GetCollectionStatisticsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollectionStatisticsResponse::CopyFrom(const GetCollectionStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetCollectionStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectionStatisticsResponse::IsInitialized() const {
  return true;
}

void GetCollectionStatisticsResponse::InternalSwap(GetCollectionStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectionStatisticsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowCollectionsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ShowCollectionsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ShowCollectionsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ShowCollectionsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ShowCollectionsRequest::_Internal::base(const ShowCollectionsRequest* msg) {
  return *msg->base_;
}
void ShowCollectionsRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ShowCollectionsRequest::ShowCollectionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.ShowCollectionsRequest)
}
ShowCollectionsRequest::ShowCollectionsRequest(const ShowCollectionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowCollectionsRequest)
}

void ShowCollectionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowCollectionsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

ShowCollectionsRequest::~ShowCollectionsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowCollectionsRequest)
  SharedDtor();
}

void ShowCollectionsRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ShowCollectionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowCollectionsRequest& ShowCollectionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowCollectionsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShowCollectionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowCollectionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShowCollectionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.ShowCollectionsRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShowCollectionsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.ShowCollectionsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.ShowCollectionsRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.ShowCollectionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.ShowCollectionsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShowCollectionsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.ShowCollectionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowCollectionsRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.ShowCollectionsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowCollectionsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowCollectionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowCollectionsRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowCollectionsRequest)
  return target;
}

size_t ShowCollectionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowCollectionsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowCollectionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShowCollectionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowCollectionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowCollectionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShowCollectionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShowCollectionsRequest)
    MergeFrom(*source);
  }
}

void ShowCollectionsRequest::MergeFrom(const ShowCollectionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowCollectionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void ShowCollectionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShowCollectionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowCollectionsRequest::CopyFrom(const ShowCollectionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowCollectionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowCollectionsRequest::IsInitialized() const {
  return true;
}

void ShowCollectionsRequest::InternalSwap(ShowCollectionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowCollectionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowCollectionsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ShowCollectionsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ShowCollectionsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ShowCollectionsResponse* msg);
};

const ::milvus::proto::common::Status&
ShowCollectionsResponse::_Internal::status(const ShowCollectionsResponse* msg) {
  return *msg->status_;
}
void ShowCollectionsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ShowCollectionsResponse::ShowCollectionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.ShowCollectionsResponse)
}
ShowCollectionsResponse::ShowCollectionsResponse(const ShowCollectionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collection_names_(from.collection_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowCollectionsResponse)
}

void ShowCollectionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowCollectionsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

ShowCollectionsResponse::~ShowCollectionsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowCollectionsResponse)
  SharedDtor();
}

void ShowCollectionsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void ShowCollectionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowCollectionsResponse& ShowCollectionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowCollectionsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShowCollectionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowCollectionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_names_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShowCollectionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string collection_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_collection_names(), ptr, ctx, "milvus.proto.milvus.ShowCollectionsResponse.collection_names");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShowCollectionsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.ShowCollectionsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string collection_names = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_collection_names()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_names(this->collection_names_size() - 1).data(),
            static_cast<int>(this->collection_names(this->collection_names_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.ShowCollectionsResponse.collection_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.ShowCollectionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.ShowCollectionsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShowCollectionsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.ShowCollectionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // repeated string collection_names = 2;
  for (int i = 0, n = this->collection_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_names(i).data(), static_cast<int>(this->collection_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowCollectionsResponse.collection_names");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->collection_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.ShowCollectionsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowCollectionsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowCollectionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // repeated string collection_names = 2;
  for (int i = 0, n = this->collection_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_names(i).data(), static_cast<int>(this->collection_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowCollectionsResponse.collection_names");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->collection_names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowCollectionsResponse)
  return target;
}

size_t ShowCollectionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowCollectionsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collection_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->collection_names_size());
  for (int i = 0, n = this->collection_names_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->collection_names(i));
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowCollectionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShowCollectionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowCollectionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowCollectionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShowCollectionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShowCollectionsResponse)
    MergeFrom(*source);
  }
}

void ShowCollectionsResponse::MergeFrom(const ShowCollectionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowCollectionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collection_names_.MergeFrom(from.collection_names_);
  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
}

void ShowCollectionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShowCollectionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowCollectionsResponse::CopyFrom(const ShowCollectionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowCollectionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowCollectionsResponse::IsInitialized() const {
  return true;
}

void ShowCollectionsResponse::InternalSwap(ShowCollectionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collection_names_.InternalSwap(CastToBase(&other->collection_names_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowCollectionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePartitionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CreatePartitionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class CreatePartitionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreatePartitionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreatePartitionRequest::_Internal::base(const CreatePartitionRequest* msg) {
  return *msg->base_;
}
void CreatePartitionRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
CreatePartitionRequest::CreatePartitionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.CreatePartitionRequest)
}
CreatePartitionRequest::CreatePartitionRequest(const CreatePartitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.partition_name().empty()) {
    partition_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreatePartitionRequest)
}

void CreatePartitionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePartitionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

CreatePartitionRequest::~CreatePartitionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreatePartitionRequest)
  SharedDtor();
}

void CreatePartitionRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void CreatePartitionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePartitionRequest& CreatePartitionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePartitionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CreatePartitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreatePartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreatePartitionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.CreatePartitionRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.CreatePartitionRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_partition_name(), ptr, ctx, "milvus.proto.milvus.CreatePartitionRequest.partition_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreatePartitionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.CreatePartitionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.CreatePartitionRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.CreatePartitionRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partition_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->partition_name().data(), static_cast<int>(this->partition_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.CreatePartitionRequest.partition_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.CreatePartitionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.CreatePartitionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreatePartitionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.CreatePartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreatePartitionRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreatePartitionRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_name().data(), static_cast<int>(this->partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreatePartitionRequest.partition_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->partition_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.CreatePartitionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePartitionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreatePartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreatePartitionRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreatePartitionRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_name().data(), static_cast<int>(this->partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreatePartitionRequest.partition_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->partition_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreatePartitionRequest)
  return target;
}

size_t CreatePartitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreatePartitionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePartitionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CreatePartitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePartitionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePartitionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CreatePartitionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CreatePartitionRequest)
    MergeFrom(*source);
  }
}

void CreatePartitionRequest::MergeFrom(const CreatePartitionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreatePartitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.partition_name().size() > 0) {

    partition_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void CreatePartitionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CreatePartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePartitionRequest::CopyFrom(const CreatePartitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreatePartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePartitionRequest::IsInitialized() const {
  return true;
}

void CreatePartitionRequest::InternalSwap(CreatePartitionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePartitionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropPartitionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DropPartitionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DropPartitionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropPartitionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropPartitionRequest::_Internal::base(const DropPartitionRequest* msg) {
  return *msg->base_;
}
void DropPartitionRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DropPartitionRequest::DropPartitionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.DropPartitionRequest)
}
DropPartitionRequest::DropPartitionRequest(const DropPartitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.partition_name().empty()) {
    partition_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropPartitionRequest)
}

void DropPartitionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropPartitionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DropPartitionRequest::~DropPartitionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropPartitionRequest)
  SharedDtor();
}

void DropPartitionRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DropPartitionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropPartitionRequest& DropPartitionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropPartitionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DropPartitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropPartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DropPartitionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.DropPartitionRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.DropPartitionRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_partition_name(), ptr, ctx, "milvus.proto.milvus.DropPartitionRequest.partition_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DropPartitionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.DropPartitionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DropPartitionRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DropPartitionRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partition_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->partition_name().data(), static_cast<int>(this->partition_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DropPartitionRequest.partition_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.DropPartitionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.DropPartitionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DropPartitionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.DropPartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropPartitionRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropPartitionRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_name().data(), static_cast<int>(this->partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropPartitionRequest.partition_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->partition_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.DropPartitionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DropPartitionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropPartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropPartitionRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropPartitionRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_name().data(), static_cast<int>(this->partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropPartitionRequest.partition_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->partition_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropPartitionRequest)
  return target;
}

size_t DropPartitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropPartitionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropPartitionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DropPartitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropPartitionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropPartitionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DropPartitionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DropPartitionRequest)
    MergeFrom(*source);
  }
}

void DropPartitionRequest::MergeFrom(const DropPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropPartitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.partition_name().size() > 0) {

    partition_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void DropPartitionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DropPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropPartitionRequest::CopyFrom(const DropPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropPartitionRequest::IsInitialized() const {
  return true;
}

void DropPartitionRequest::InternalSwap(DropPartitionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropPartitionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HasPartitionRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_HasPartitionRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class HasPartitionRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const HasPartitionRequest* msg);
};

const ::milvus::proto::common::MsgBase&
HasPartitionRequest::_Internal::base(const HasPartitionRequest* msg) {
  return *msg->base_;
}
void HasPartitionRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
HasPartitionRequest::HasPartitionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.HasPartitionRequest)
}
HasPartitionRequest::HasPartitionRequest(const HasPartitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.partition_name().empty()) {
    partition_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.HasPartitionRequest)
}

void HasPartitionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HasPartitionRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

HasPartitionRequest::~HasPartitionRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.HasPartitionRequest)
  SharedDtor();
}

void HasPartitionRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void HasPartitionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HasPartitionRequest& HasPartitionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HasPartitionRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void HasPartitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.HasPartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HasPartitionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.HasPartitionRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.HasPartitionRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_partition_name(), ptr, ctx, "milvus.proto.milvus.HasPartitionRequest.partition_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HasPartitionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.HasPartitionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.HasPartitionRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.HasPartitionRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partition_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->partition_name().data(), static_cast<int>(this->partition_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.HasPartitionRequest.partition_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.HasPartitionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.HasPartitionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HasPartitionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.HasPartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasPartitionRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasPartitionRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_name().data(), static_cast<int>(this->partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasPartitionRequest.partition_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->partition_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.HasPartitionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* HasPartitionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.HasPartitionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasPartitionRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasPartitionRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_name().data(), static_cast<int>(this->partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.HasPartitionRequest.partition_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->partition_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.HasPartitionRequest)
  return target;
}

size_t HasPartitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.HasPartitionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HasPartitionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.HasPartitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HasPartitionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HasPartitionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.HasPartitionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.HasPartitionRequest)
    MergeFrom(*source);
  }
}

void HasPartitionRequest::MergeFrom(const HasPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.HasPartitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.partition_name().size() > 0) {

    partition_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void HasPartitionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.HasPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HasPartitionRequest::CopyFrom(const HasPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.HasPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasPartitionRequest::IsInitialized() const {
  return true;
}

void HasPartitionRequest::InternalSwap(HasPartitionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HasPartitionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadPartitionsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_LoadPartitionsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class LoadPartitionsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const LoadPartitionsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
LoadPartitionsRequest::_Internal::base(const LoadPartitionsRequest* msg) {
  return *msg->base_;
}
void LoadPartitionsRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
LoadPartitionsRequest::LoadPartitionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.LoadPartitionsRequest)
}
LoadPartitionsRequest::LoadPartitionsRequest(const LoadPartitionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      partition_names_(from.partition_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.LoadPartitionsRequest)
}

void LoadPartitionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadPartitionsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

LoadPartitionsRequest::~LoadPartitionsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.LoadPartitionsRequest)
  SharedDtor();
}

void LoadPartitionsRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void LoadPartitionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadPartitionsRequest& LoadPartitionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadPartitionsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void LoadPartitionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.LoadPartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoadPartitionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.LoadPartitionsRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.LoadPartitionsRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_partition_names(), ptr, ctx, "milvus.proto.milvus.LoadPartitionsRequest.partition_names");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoadPartitionsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.LoadPartitionsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.LoadPartitionsRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.LoadPartitionsRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string partition_names = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_partition_names()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->partition_names(this->partition_names_size() - 1).data(),
            static_cast<int>(this->partition_names(this->partition_names_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.LoadPartitionsRequest.partition_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.LoadPartitionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.LoadPartitionsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoadPartitionsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.LoadPartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->partition_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_names(i).data(), static_cast<int>(this->partition_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.partition_names");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->partition_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.LoadPartitionsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadPartitionsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.LoadPartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->partition_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_names(i).data(), static_cast<int>(this->partition_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.LoadPartitionsRequest.partition_names");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->partition_names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.LoadPartitionsRequest)
  return target;
}

size_t LoadPartitionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.LoadPartitionsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->partition_names_size());
  for (int i = 0, n = this->partition_names_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->partition_names(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadPartitionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.LoadPartitionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadPartitionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadPartitionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.LoadPartitionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.LoadPartitionsRequest)
    MergeFrom(*source);
  }
}

void LoadPartitionsRequest::MergeFrom(const LoadPartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.LoadPartitionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void LoadPartitionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.LoadPartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPartitionsRequest::CopyFrom(const LoadPartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.LoadPartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPartitionsRequest::IsInitialized() const {
  return true;
}

void LoadPartitionsRequest::InternalSwap(LoadPartitionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partition_names_.InternalSwap(CastToBase(&other->partition_names_));
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadPartitionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleasePartitionsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ReleasePartitionsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ReleasePartitionsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ReleasePartitionsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ReleasePartitionsRequest::_Internal::base(const ReleasePartitionsRequest* msg) {
  return *msg->base_;
}
void ReleasePartitionsRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ReleasePartitionsRequest::ReleasePartitionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.ReleasePartitionsRequest)
}
ReleasePartitionsRequest::ReleasePartitionsRequest(const ReleasePartitionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      partition_names_(from.partition_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ReleasePartitionsRequest)
}

void ReleasePartitionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleasePartitionsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

ReleasePartitionsRequest::~ReleasePartitionsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ReleasePartitionsRequest)
  SharedDtor();
}

void ReleasePartitionsRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ReleasePartitionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleasePartitionsRequest& ReleasePartitionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleasePartitionsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ReleasePartitionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ReleasePartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReleasePartitionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.ReleasePartitionsRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.ReleasePartitionsRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_partition_names(), ptr, ctx, "milvus.proto.milvus.ReleasePartitionsRequest.partition_names");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReleasePartitionsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.ReleasePartitionsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.ReleasePartitionsRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.ReleasePartitionsRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string partition_names = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_partition_names()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->partition_names(this->partition_names_size() - 1).data(),
            static_cast<int>(this->partition_names(this->partition_names_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.ReleasePartitionsRequest.partition_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.ReleasePartitionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.ReleasePartitionsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReleasePartitionsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.ReleasePartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleasePartitionsRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleasePartitionsRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->partition_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_names(i).data(), static_cast<int>(this->partition_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleasePartitionsRequest.partition_names");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->partition_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.ReleasePartitionsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleasePartitionsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ReleasePartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleasePartitionsRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleasePartitionsRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->partition_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_names(i).data(), static_cast<int>(this->partition_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ReleasePartitionsRequest.partition_names");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->partition_names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ReleasePartitionsRequest)
  return target;
}

size_t ReleasePartitionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ReleasePartitionsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->partition_names_size());
  for (int i = 0, n = this->partition_names_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->partition_names(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleasePartitionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ReleasePartitionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleasePartitionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleasePartitionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ReleasePartitionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ReleasePartitionsRequest)
    MergeFrom(*source);
  }
}

void ReleasePartitionsRequest::MergeFrom(const ReleasePartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ReleasePartitionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void ReleasePartitionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ReleasePartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleasePartitionsRequest::CopyFrom(const ReleasePartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ReleasePartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleasePartitionsRequest::IsInitialized() const {
  return true;
}

void ReleasePartitionsRequest::InternalSwap(ReleasePartitionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partition_names_.InternalSwap(CastToBase(&other->partition_names_));
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleasePartitionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPartitionStatisticsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetPartitionStatisticsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetPartitionStatisticsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetPartitionStatisticsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetPartitionStatisticsRequest::_Internal::base(const GetPartitionStatisticsRequest* msg) {
  return *msg->base_;
}
void GetPartitionStatisticsRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetPartitionStatisticsRequest::GetPartitionStatisticsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.GetPartitionStatisticsRequest)
}
GetPartitionStatisticsRequest::GetPartitionStatisticsRequest(const GetPartitionStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.partition_name().empty()) {
    partition_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetPartitionStatisticsRequest)
}

void GetPartitionStatisticsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPartitionStatisticsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetPartitionStatisticsRequest::~GetPartitionStatisticsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetPartitionStatisticsRequest)
  SharedDtor();
}

void GetPartitionStatisticsRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetPartitionStatisticsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPartitionStatisticsRequest& GetPartitionStatisticsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPartitionStatisticsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetPartitionStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetPartitionStatisticsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.GetPartitionStatisticsRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_partition_name(), ptr, ctx, "milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetPartitionStatisticsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetPartitionStatisticsRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partition_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->partition_name().data(), static_cast<int>(this->partition_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.GetPartitionStatisticsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.GetPartitionStatisticsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetPartitionStatisticsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPartitionStatisticsRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_name().data(), static_cast<int>(this->partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->partition_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.GetPartitionStatisticsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPartitionStatisticsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPartitionStatisticsRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPartitionStatisticsRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_name().data(), static_cast<int>(this->partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPartitionStatisticsRequest.partition_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->partition_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetPartitionStatisticsRequest)
  return target;
}

size_t GetPartitionStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPartitionStatisticsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPartitionStatisticsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPartitionStatisticsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetPartitionStatisticsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetPartitionStatisticsRequest)
    MergeFrom(*source);
  }
}

void GetPartitionStatisticsRequest::MergeFrom(const GetPartitionStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.partition_name().size() > 0) {

    partition_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void GetPartitionStatisticsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPartitionStatisticsRequest::CopyFrom(const GetPartitionStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetPartitionStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartitionStatisticsRequest::IsInitialized() const {
  return true;
}

void GetPartitionStatisticsRequest::InternalSwap(GetPartitionStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPartitionStatisticsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPartitionStatisticsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetPartitionStatisticsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetPartitionStatisticsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetPartitionStatisticsResponse* msg);
};

const ::milvus::proto::common::Status&
GetPartitionStatisticsResponse::_Internal::status(const GetPartitionStatisticsResponse* msg) {
  return *msg->status_;
}
void GetPartitionStatisticsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void GetPartitionStatisticsResponse::clear_stats() {
  stats_.Clear();
}
GetPartitionStatisticsResponse::GetPartitionStatisticsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.GetPartitionStatisticsResponse)
}
GetPartitionStatisticsResponse::GetPartitionStatisticsResponse(const GetPartitionStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetPartitionStatisticsResponse)
}

void GetPartitionStatisticsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPartitionStatisticsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

GetPartitionStatisticsResponse::~GetPartitionStatisticsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetPartitionStatisticsResponse)
  SharedDtor();
}

void GetPartitionStatisticsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GetPartitionStatisticsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPartitionStatisticsResponse& GetPartitionStatisticsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPartitionStatisticsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetPartitionStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetPartitionStatisticsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetPartitionStatisticsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.proto.common.KeyValuePair stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.GetPartitionStatisticsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.GetPartitionStatisticsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetPartitionStatisticsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.GetPartitionStatisticsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPartitionStatisticsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stats(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetPartitionStatisticsResponse)
  return target;
}

size_t GetPartitionStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPartitionStatisticsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPartitionStatisticsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPartitionStatisticsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetPartitionStatisticsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetPartitionStatisticsResponse)
    MergeFrom(*source);
  }
}

void GetPartitionStatisticsResponse::MergeFrom(const GetPartitionStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
}

void GetPartitionStatisticsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPartitionStatisticsResponse::CopyFrom(const GetPartitionStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetPartitionStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartitionStatisticsResponse::IsInitialized() const {
  return true;
}

void GetPartitionStatisticsResponse::InternalSwap(GetPartitionStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPartitionStatisticsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowPartitionsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ShowPartitionsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ShowPartitionsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ShowPartitionsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ShowPartitionsRequest::_Internal::base(const ShowPartitionsRequest* msg) {
  return *msg->base_;
}
void ShowPartitionsRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ShowPartitionsRequest::ShowPartitionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.ShowPartitionsRequest)
}
ShowPartitionsRequest::ShowPartitionsRequest(const ShowPartitionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  collectionid_ = from.collectionid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowPartitionsRequest)
}

void ShowPartitionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowPartitionsRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collectionid_) -
      reinterpret_cast<char*>(&base_)) + sizeof(collectionid_));
}

ShowPartitionsRequest::~ShowPartitionsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowPartitionsRequest)
  SharedDtor();
}

void ShowPartitionsRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ShowPartitionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowPartitionsRequest& ShowPartitionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowPartitionsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShowPartitionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowPartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  collectionid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShowPartitionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.ShowPartitionsRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.ShowPartitionsRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShowPartitionsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.ShowPartitionsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.ShowPartitionsRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.ShowPartitionsRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 collectionID = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &collectionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.ShowPartitionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.ShowPartitionsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShowPartitionsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.ShowPartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // int64 collectionID = 4;
  if (this->collectionid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->collectionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.ShowPartitionsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowPartitionsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowPartitionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // int64 collectionID = 4;
  if (this->collectionid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->collectionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowPartitionsRequest)
  return target;
}

size_t ShowPartitionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowPartitionsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int64 collectionID = 4;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->collectionid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowPartitionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShowPartitionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowPartitionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowPartitionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShowPartitionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShowPartitionsRequest)
    MergeFrom(*source);
  }
}

void ShowPartitionsRequest::MergeFrom(const ShowPartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowPartitionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
  if (from.collectionid() != 0) {
    set_collectionid(from.collectionid());
  }
}

void ShowPartitionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShowPartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowPartitionsRequest::CopyFrom(const ShowPartitionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowPartitionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowPartitionsRequest::IsInitialized() const {
  return true;
}

void ShowPartitionsRequest::InternalSwap(ShowPartitionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
  swap(collectionid_, other->collectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowPartitionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowPartitionsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ShowPartitionsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ShowPartitionsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ShowPartitionsResponse* msg);
};

const ::milvus::proto::common::Status&
ShowPartitionsResponse::_Internal::status(const ShowPartitionsResponse* msg) {
  return *msg->status_;
}
void ShowPartitionsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ShowPartitionsResponse::ShowPartitionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.ShowPartitionsResponse)
}
ShowPartitionsResponse::ShowPartitionsResponse(const ShowPartitionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      partition_names_(from.partition_names_),
      partitionids_(from.partitionids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowPartitionsResponse)
}

void ShowPartitionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowPartitionsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

ShowPartitionsResponse::~ShowPartitionsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowPartitionsResponse)
  SharedDtor();
}

void ShowPartitionsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void ShowPartitionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowPartitionsResponse& ShowPartitionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowPartitionsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShowPartitionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowPartitionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  partitionids_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShowPartitionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_partition_names(), ptr, ctx, "milvus.proto.milvus.ShowPartitionsResponse.partition_names");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated int64 partitionIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_partitionids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_partitionids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShowPartitionsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.ShowPartitionsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string partition_names = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_partition_names()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->partition_names(this->partition_names_size() - 1).data(),
            static_cast<int>(this->partition_names(this->partition_names_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.ShowPartitionsResponse.partition_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 partitionIDs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_partitionids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_partitionids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.ShowPartitionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.ShowPartitionsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShowPartitionsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.ShowPartitionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // repeated string partition_names = 2;
  for (int i = 0, n = this->partition_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_names(i).data(), static_cast<int>(this->partition_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsResponse.partition_names");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->partition_names(i), output);
  }

  // repeated int64 partitionIDs = 3;
  if (this->partitionids_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partitionids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->partitionids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->partitionids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.ShowPartitionsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowPartitionsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowPartitionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // repeated string partition_names = 2;
  for (int i = 0, n = this->partition_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_names(i).data(), static_cast<int>(this->partition_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.ShowPartitionsResponse.partition_names");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->partition_names(i), target);
  }

  // repeated int64 partitionIDs = 3;
  if (this->partitionids_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _partitionids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->partitionids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowPartitionsResponse)
  return target;
}

size_t ShowPartitionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowPartitionsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->partition_names_size());
  for (int i = 0, n = this->partition_names_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->partition_names(i));
  }

  // repeated int64 partitionIDs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->partitionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _partitionids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowPartitionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShowPartitionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowPartitionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowPartitionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShowPartitionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShowPartitionsResponse)
    MergeFrom(*source);
  }
}

void ShowPartitionsResponse::MergeFrom(const ShowPartitionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowPartitionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  partitionids_.MergeFrom(from.partitionids_);
  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
}

void ShowPartitionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShowPartitionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowPartitionsResponse::CopyFrom(const ShowPartitionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowPartitionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowPartitionsResponse::IsInitialized() const {
  return true;
}

void ShowPartitionsResponse::InternalSwap(ShowPartitionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partition_names_.InternalSwap(CastToBase(&other->partition_names_));
  partitionids_.InternalSwap(&other->partitionids_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowPartitionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeSegmentRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeSegmentRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DescribeSegmentRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeSegmentRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeSegmentRequest::_Internal::base(const DescribeSegmentRequest* msg) {
  return *msg->base_;
}
void DescribeSegmentRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DescribeSegmentRequest::DescribeSegmentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.DescribeSegmentRequest)
}
DescribeSegmentRequest::DescribeSegmentRequest(const DescribeSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&collectionid_, &from.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&segmentid_) -
    reinterpret_cast<char*>(&collectionid_)) + sizeof(segmentid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeSegmentRequest)
}

void DescribeSegmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeSegmentRequest_milvus_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segmentid_) -
      reinterpret_cast<char*>(&base_)) + sizeof(segmentid_));
}

DescribeSegmentRequest::~DescribeSegmentRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeSegmentRequest)
  SharedDtor();
}

void DescribeSegmentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
}

void DescribeSegmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeSegmentRequest& DescribeSegmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeSegmentRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segmentid_) -
      reinterpret_cast<char*>(&collectionid_)) + sizeof(segmentid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DescribeSegmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 segmentID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DescribeSegmentRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.DescribeSegmentRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 collectionID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &collectionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 segmentID = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &segmentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.DescribeSegmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.DescribeSegmentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DescribeSegmentRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.DescribeSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->collectionid(), output);
  }

  // int64 segmentID = 3;
  if (this->segmentid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->segmentid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.DescribeSegmentRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeSegmentRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeSegmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->collectionid(), target);
  }

  // int64 segmentID = 3;
  if (this->segmentid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->segmentid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeSegmentRequest)
  return target;
}

size_t DescribeSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeSegmentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->collectionid());
  }

  // int64 segmentID = 3;
  if (this->segmentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->segmentid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeSegmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeSegmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeSegmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeSegmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeSegmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeSegmentRequest)
    MergeFrom(*source);
  }
}

void DescribeSegmentRequest::MergeFrom(const DescribeSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeSegmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
  if (from.collectionid() != 0) {
    set_collectionid(from.collectionid());
  }
  if (from.segmentid() != 0) {
    set_segmentid(from.segmentid());
  }
}

void DescribeSegmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeSegmentRequest::CopyFrom(const DescribeSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeSegmentRequest::IsInitialized() const {
  return true;
}

void DescribeSegmentRequest::InternalSwap(DescribeSegmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(base_, other->base_);
  swap(collectionid_, other->collectionid_);
  swap(segmentid_, other->segmentid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeSegmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeSegmentResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeSegmentResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class DescribeSegmentResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeSegmentResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeSegmentResponse::_Internal::status(const DescribeSegmentResponse* msg) {
  return *msg->status_;
}
void DescribeSegmentResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DescribeSegmentResponse::DescribeSegmentResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.DescribeSegmentResponse)
}
DescribeSegmentResponse::DescribeSegmentResponse(const DescribeSegmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&indexid_, &from.indexid_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_index_) -
    reinterpret_cast<char*>(&indexid_)) + sizeof(enable_index_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeSegmentResponse)
}

void DescribeSegmentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeSegmentResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_index_) -
      reinterpret_cast<char*>(&status_)) + sizeof(enable_index_));
}

DescribeSegmentResponse::~DescribeSegmentResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeSegmentResponse)
  SharedDtor();
}

void DescribeSegmentResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void DescribeSegmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeSegmentResponse& DescribeSegmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeSegmentResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeSegmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeSegmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&indexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_index_) -
      reinterpret_cast<char*>(&indexid_)) + sizeof(enable_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DescribeSegmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 indexID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 buildID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          buildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DescribeSegmentResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.DescribeSegmentResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 indexID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &indexid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 buildID = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &buildid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_index = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.DescribeSegmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.DescribeSegmentResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DescribeSegmentResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.DescribeSegmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->indexid(), output);
  }

  // int64 buildID = 3;
  if (this->buildid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->buildid(), output);
  }

  // bool enable_index = 4;
  if (this->enable_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->enable_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.DescribeSegmentResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeSegmentResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeSegmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->indexid(), target);
  }

  // int64 buildID = 3;
  if (this->buildid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->buildid(), target);
  }

  // bool enable_index = 4;
  if (this->enable_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->enable_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeSegmentResponse)
  return target;
}

size_t DescribeSegmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeSegmentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->indexid());
  }

  // int64 buildID = 3;
  if (this->buildid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->buildid());
  }

  // bool enable_index = 4;
  if (this->enable_index() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeSegmentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeSegmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeSegmentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeSegmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeSegmentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeSegmentResponse)
    MergeFrom(*source);
  }
}

void DescribeSegmentResponse::MergeFrom(const DescribeSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeSegmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
  if (from.indexid() != 0) {
    set_indexid(from.indexid());
  }
  if (from.buildid() != 0) {
    set_buildid(from.buildid());
  }
  if (from.enable_index() != 0) {
    set_enable_index(from.enable_index());
  }
}

void DescribeSegmentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeSegmentResponse::CopyFrom(const DescribeSegmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeSegmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeSegmentResponse::IsInitialized() const {
  return true;
}

void DescribeSegmentResponse::InternalSwap(DescribeSegmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(indexid_, other->indexid_);
  swap(buildid_, other->buildid_);
  swap(enable_index_, other->enable_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeSegmentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowSegmentsRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ShowSegmentsRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class ShowSegmentsRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const ShowSegmentsRequest* msg);
};

const ::milvus::proto::common::MsgBase&
ShowSegmentsRequest::_Internal::base(const ShowSegmentsRequest* msg) {
  return *msg->base_;
}
void ShowSegmentsRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ShowSegmentsRequest::ShowSegmentsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.ShowSegmentsRequest)
}
ShowSegmentsRequest::ShowSegmentsRequest(const ShowSegmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&collectionid_, &from.collectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&partitionid_) -
    reinterpret_cast<char*>(&collectionid_)) + sizeof(partitionid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowSegmentsRequest)
}

void ShowSegmentsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowSegmentsRequest_milvus_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partitionid_) -
      reinterpret_cast<char*>(&base_)) + sizeof(partitionid_));
}

ShowSegmentsRequest::~ShowSegmentsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowSegmentsRequest)
  SharedDtor();
}

void ShowSegmentsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
}

void ShowSegmentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowSegmentsRequest& ShowSegmentsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowSegmentsRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShowSegmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowSegmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&collectionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partitionid_) -
      reinterpret_cast<char*>(&collectionid_)) + sizeof(partitionid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShowSegmentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShowSegmentsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.ShowSegmentsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 collectionID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &collectionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 partitionID = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &partitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.ShowSegmentsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.ShowSegmentsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShowSegmentsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.ShowSegmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->collectionid(), output);
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->partitionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.ShowSegmentsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowSegmentsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowSegmentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->partitionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowSegmentsRequest)
  return target;
}

size_t ShowSegmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowSegmentsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->collectionid());
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->partitionid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowSegmentsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShowSegmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowSegmentsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowSegmentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShowSegmentsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShowSegmentsRequest)
    MergeFrom(*source);
  }
}

void ShowSegmentsRequest::MergeFrom(const ShowSegmentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowSegmentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
  if (from.collectionid() != 0) {
    set_collectionid(from.collectionid());
  }
  if (from.partitionid() != 0) {
    set_partitionid(from.partitionid());
  }
}

void ShowSegmentsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShowSegmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowSegmentsRequest::CopyFrom(const ShowSegmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowSegmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSegmentsRequest::IsInitialized() const {
  return true;
}

void ShowSegmentsRequest::InternalSwap(ShowSegmentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(base_, other->base_);
  swap(collectionid_, other->collectionid_);
  swap(partitionid_, other->partitionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowSegmentsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShowSegmentsResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_ShowSegmentsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class ShowSegmentsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const ShowSegmentsResponse* msg);
};

const ::milvus::proto::common::Status&
ShowSegmentsResponse::_Internal::status(const ShowSegmentsResponse* msg) {
  return *msg->status_;
}
void ShowSegmentsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ShowSegmentsResponse::ShowSegmentsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.ShowSegmentsResponse)
}
ShowSegmentsResponse::ShowSegmentsResponse(const ShowSegmentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      segmentids_(from.segmentids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.ShowSegmentsResponse)
}

void ShowSegmentsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowSegmentsResponse_milvus_2eproto.base);
  status_ = nullptr;
}

ShowSegmentsResponse::~ShowSegmentsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.ShowSegmentsResponse)
  SharedDtor();
}

void ShowSegmentsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void ShowSegmentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowSegmentsResponse& ShowSegmentsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowSegmentsResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void ShowSegmentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.ShowSegmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segmentids_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShowSegmentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 segmentIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_segmentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_segmentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShowSegmentsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.ShowSegmentsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 segmentIDs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_segmentids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_segmentids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.ShowSegmentsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.ShowSegmentsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShowSegmentsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.ShowSegmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // repeated int64 segmentIDs = 2;
  if (this->segmentids_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_segmentids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->segmentids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->segmentids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.ShowSegmentsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowSegmentsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.ShowSegmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // repeated int64 segmentIDs = 2;
  if (this->segmentids_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _segmentids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->segmentids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.ShowSegmentsResponse)
  return target;
}

size_t ShowSegmentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.ShowSegmentsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 segmentIDs = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->segmentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _segmentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowSegmentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.ShowSegmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowSegmentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowSegmentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.ShowSegmentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.ShowSegmentsResponse)
    MergeFrom(*source);
  }
}

void ShowSegmentsResponse::MergeFrom(const ShowSegmentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.ShowSegmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segmentids_.MergeFrom(from.segmentids_);
  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
}

void ShowSegmentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.ShowSegmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowSegmentsResponse::CopyFrom(const ShowSegmentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.ShowSegmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSegmentsResponse::IsInitialized() const {
  return true;
}

void ShowSegmentsResponse::InternalSwap(ShowSegmentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  segmentids_.InternalSwap(&other->segmentids_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowSegmentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateIndexRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_CreateIndexRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class CreateIndexRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const CreateIndexRequest* msg);
};

const ::milvus::proto::common::MsgBase&
CreateIndexRequest::_Internal::base(const CreateIndexRequest* msg) {
  return *msg->base_;
}
void CreateIndexRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void CreateIndexRequest::clear_extra_params() {
  extra_params_.Clear();
}
CreateIndexRequest::CreateIndexRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.CreateIndexRequest)
}
CreateIndexRequest::CreateIndexRequest(const CreateIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      extra_params_(from.extra_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.field_name().empty()) {
    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.CreateIndexRequest)
}

void CreateIndexRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateIndexRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

CreateIndexRequest::~CreateIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.CreateIndexRequest)
  SharedDtor();
}

void CreateIndexRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void CreateIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateIndexRequest& CreateIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateIndexRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void CreateIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.CreateIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_params_.Clear();
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.CreateIndexRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.CreateIndexRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_field_name(), ptr, ctx, "milvus.proto.milvus.CreateIndexRequest.field_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_extra_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateIndexRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.CreateIndexRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.CreateIndexRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.CreateIndexRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->field_name().data(), static_cast<int>(this->field_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.CreateIndexRequest.field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_extra_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.CreateIndexRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.CreateIndexRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateIndexRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.CreateIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.field_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->field_name(), output);
  }

  // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_params_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->extra_params(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.CreateIndexRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateIndexRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.CreateIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.CreateIndexRequest.field_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->field_name(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_params_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->extra_params(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.CreateIndexRequest)
  return target;
}

size_t CreateIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.CreateIndexRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair extra_params = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->extra_params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->extra_params(static_cast<int>(i)));
    }
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->field_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.CreateIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.CreateIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.CreateIndexRequest)
    MergeFrom(*source);
  }
}

void CreateIndexRequest::MergeFrom(const CreateIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.CreateIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_params_.MergeFrom(from.extra_params_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void CreateIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.CreateIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateIndexRequest::CopyFrom(const CreateIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.CreateIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIndexRequest::IsInitialized() const {
  return true;
}

void CreateIndexRequest::InternalSwap(CreateIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&extra_params_)->InternalSwap(CastToBase(&other->extra_params_));
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeIndexRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeIndexRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DescribeIndexRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DescribeIndexRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DescribeIndexRequest::_Internal::base(const DescribeIndexRequest* msg) {
  return *msg->base_;
}
void DescribeIndexRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DescribeIndexRequest::DescribeIndexRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.DescribeIndexRequest)
}
DescribeIndexRequest::DescribeIndexRequest(const DescribeIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.field_name().empty()) {
    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.index_name().empty()) {
    index_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeIndexRequest)
}

void DescribeIndexRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeIndexRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DescribeIndexRequest::~DescribeIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeIndexRequest)
  SharedDtor();
}

void DescribeIndexRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DescribeIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeIndexRequest& DescribeIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeIndexRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DescribeIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.DescribeIndexRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.DescribeIndexRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_field_name(), ptr, ctx, "milvus.proto.milvus.DescribeIndexRequest.field_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_index_name(), ptr, ctx, "milvus.proto.milvus.DescribeIndexRequest.index_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DescribeIndexRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.DescribeIndexRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DescribeIndexRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DescribeIndexRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->field_name().data(), static_cast<int>(this->field_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DescribeIndexRequest.field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string index_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_index_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->index_name().data(), static_cast<int>(this->index_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DescribeIndexRequest.index_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.DescribeIndexRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.DescribeIndexRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DescribeIndexRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.DescribeIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.field_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->field_name(), output);
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_name().data(), static_cast<int>(this->index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.index_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->index_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.DescribeIndexRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeIndexRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.field_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->field_name(), target);
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_name().data(), static_cast<int>(this->index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DescribeIndexRequest.index_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->index_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeIndexRequest)
  return target;
}

size_t DescribeIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeIndexRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->field_name());
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeIndexRequest)
    MergeFrom(*source);
  }
}

void DescribeIndexRequest::MergeFrom(const DescribeIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  if (from.index_name().size() > 0) {

    index_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void DescribeIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeIndexRequest::CopyFrom(const DescribeIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeIndexRequest::IsInitialized() const {
  return true;
}

void DescribeIndexRequest::InternalSwap(DescribeIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IndexDescription::InitAsDefaultInstance() {
}
class IndexDescription::_Internal {
 public:
};

void IndexDescription::clear_params() {
  params_.Clear();
}
IndexDescription::IndexDescription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.IndexDescription)
}
IndexDescription::IndexDescription(const IndexDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      params_(from.params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.index_name().empty()) {
    index_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_name_);
  }
  indexid_ = from.indexid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.IndexDescription)
}

void IndexDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexDescription_milvus_2eproto.base);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indexid_ = PROTOBUF_LONGLONG(0);
}

IndexDescription::~IndexDescription() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.IndexDescription)
  SharedDtor();
}

void IndexDescription::SharedDtor() {
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IndexDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexDescription& IndexDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexDescription_milvus_2eproto.base);
  return *internal_default_instance();
}


void IndexDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.IndexDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  index_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indexid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IndexDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_index_name(), ptr, ctx, "milvus.proto.milvus.IndexDescription.index_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 indexID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IndexDescription::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.IndexDescription)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string index_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_index_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->index_name().data(), static_cast<int>(this->index_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.IndexDescription.index_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 indexID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &indexid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.proto.common.KeyValuePair params = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.IndexDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.IndexDescription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IndexDescription::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.IndexDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_name().data(), static_cast<int>(this->index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.IndexDescription.index_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->index_name(), output);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->indexid(), output);
  }

  // repeated .milvus.proto.common.KeyValuePair params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->params_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->params(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.IndexDescription)
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexDescription::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.IndexDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_name().data(), static_cast<int>(this->index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.IndexDescription.index_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->index_name(), target);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->indexid(), target);
  }

  // repeated .milvus.proto.common.KeyValuePair params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->params_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->params(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.IndexDescription)
  return target;
}

size_t IndexDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.IndexDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.KeyValuePair params = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->params(static_cast<int>(i)));
    }
  }

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->index_name());
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->indexid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.IndexDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.IndexDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.IndexDescription)
    MergeFrom(*source);
  }
}

void IndexDescription::MergeFrom(const IndexDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.IndexDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.index_name().size() > 0) {

    index_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_name_);
  }
  if (from.indexid() != 0) {
    set_indexid(from.indexid());
  }
}

void IndexDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.IndexDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexDescription::CopyFrom(const IndexDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.IndexDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexDescription::IsInitialized() const {
  return true;
}

void IndexDescription::InternalSwap(IndexDescription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&params_)->InternalSwap(CastToBase(&other->params_));
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(indexid_, other->indexid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribeIndexResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DescribeIndexResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class DescribeIndexResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribeIndexResponse* msg);
};

const ::milvus::proto::common::Status&
DescribeIndexResponse::_Internal::status(const DescribeIndexResponse* msg) {
  return *msg->status_;
}
void DescribeIndexResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DescribeIndexResponse::DescribeIndexResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.DescribeIndexResponse)
}
DescribeIndexResponse::DescribeIndexResponse(const DescribeIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      index_descriptions_(from.index_descriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DescribeIndexResponse)
}

void DescribeIndexResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribeIndexResponse_milvus_2eproto.base);
  status_ = nullptr;
}

DescribeIndexResponse::~DescribeIndexResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DescribeIndexResponse)
  SharedDtor();
}

void DescribeIndexResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void DescribeIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribeIndexResponse& DescribeIndexResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribeIndexResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void DescribeIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DescribeIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_descriptions_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DescribeIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_index_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DescribeIndexResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.DescribeIndexResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_index_descriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.DescribeIndexResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.DescribeIndexResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DescribeIndexResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.DescribeIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->index_descriptions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->index_descriptions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.DescribeIndexResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeIndexResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DescribeIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->index_descriptions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->index_descriptions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DescribeIndexResponse)
  return target;
}

size_t DescribeIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DescribeIndexResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.IndexDescription index_descriptions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->index_descriptions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->index_descriptions(static_cast<int>(i)));
    }
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribeIndexResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DescribeIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribeIndexResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribeIndexResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DescribeIndexResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DescribeIndexResponse)
    MergeFrom(*source);
  }
}

void DescribeIndexResponse::MergeFrom(const DescribeIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DescribeIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_descriptions_.MergeFrom(from.index_descriptions_);
  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
}

void DescribeIndexResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DescribeIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribeIndexResponse::CopyFrom(const DescribeIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DescribeIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeIndexResponse::IsInitialized() const {
  return true;
}

void DescribeIndexResponse::InternalSwap(DescribeIndexResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&index_descriptions_)->InternalSwap(CastToBase(&other->index_descriptions_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeIndexResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIndexStateRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetIndexStateRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetIndexStateRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetIndexStateRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetIndexStateRequest::_Internal::base(const GetIndexStateRequest* msg) {
  return *msg->base_;
}
void GetIndexStateRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetIndexStateRequest::GetIndexStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.GetIndexStateRequest)
}
GetIndexStateRequest::GetIndexStateRequest(const GetIndexStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.field_name().empty()) {
    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.index_name().empty()) {
    index_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexStateRequest)
}

void GetIndexStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIndexStateRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetIndexStateRequest::~GetIndexStateRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexStateRequest)
  SharedDtor();
}

void GetIndexStateRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetIndexStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIndexStateRequest& GetIndexStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIndexStateRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetIndexStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetIndexStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.GetIndexStateRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.GetIndexStateRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_field_name(), ptr, ctx, "milvus.proto.milvus.GetIndexStateRequest.field_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_index_name(), ptr, ctx, "milvus.proto.milvus.GetIndexStateRequest.index_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetIndexStateRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.GetIndexStateRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetIndexStateRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetIndexStateRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->field_name().data(), static_cast<int>(this->field_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetIndexStateRequest.field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string index_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_index_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->index_name().data(), static_cast<int>(this->index_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetIndexStateRequest.index_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.GetIndexStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.GetIndexStateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetIndexStateRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.GetIndexStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.field_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->field_name(), output);
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_name().data(), static_cast<int>(this->index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.index_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->index_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.GetIndexStateRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIndexStateRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.field_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->field_name(), target);
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_name().data(), static_cast<int>(this->index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetIndexStateRequest.index_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->index_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexStateRequest)
  return target;
}

size_t GetIndexStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexStateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->field_name());
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIndexStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetIndexStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIndexStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIndexStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetIndexStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetIndexStateRequest)
    MergeFrom(*source);
  }
}

void GetIndexStateRequest::MergeFrom(const GetIndexStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  if (from.index_name().size() > 0) {

    index_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void GetIndexStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetIndexStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexStateRequest::CopyFrom(const GetIndexStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStateRequest::IsInitialized() const {
  return true;
}

void GetIndexStateRequest::InternalSwap(GetIndexStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIndexStateResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetIndexStateResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetIndexStateResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetIndexStateResponse* msg);
};

const ::milvus::proto::common::Status&
GetIndexStateResponse::_Internal::status(const GetIndexStateResponse* msg) {
  return *msg->status_;
}
void GetIndexStateResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetIndexStateResponse::GetIndexStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.GetIndexStateResponse)
}
GetIndexStateResponse::GetIndexStateResponse(const GetIndexStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetIndexStateResponse)
}

void GetIndexStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIndexStateResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

GetIndexStateResponse::~GetIndexStateResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetIndexStateResponse)
  SharedDtor();
}

void GetIndexStateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GetIndexStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIndexStateResponse& GetIndexStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIndexStateResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetIndexStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetIndexStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetIndexStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.IndexState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::milvus::proto::common::IndexState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetIndexStateResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.GetIndexStateResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .milvus.proto.common.IndexState state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::milvus::proto::common::IndexState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.GetIndexStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.GetIndexStateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetIndexStateResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.GetIndexStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.GetIndexStateResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIndexStateResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetIndexStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetIndexStateResponse)
  return target;
}

size_t GetIndexStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetIndexStateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .milvus.proto.common.IndexState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIndexStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetIndexStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIndexStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIndexStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetIndexStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetIndexStateResponse)
    MergeFrom(*source);
  }
}

void GetIndexStateResponse::MergeFrom(const GetIndexStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetIndexStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void GetIndexStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetIndexStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexStateResponse::CopyFrom(const GetIndexStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetIndexStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexStateResponse::IsInitialized() const {
  return true;
}

void GetIndexStateResponse::InternalSwap(GetIndexStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropIndexRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_DropIndexRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class DropIndexRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const DropIndexRequest* msg);
};

const ::milvus::proto::common::MsgBase&
DropIndexRequest::_Internal::base(const DropIndexRequest* msg) {
  return *msg->base_;
}
void DropIndexRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DropIndexRequest::DropIndexRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.DropIndexRequest)
}
DropIndexRequest::DropIndexRequest(const DropIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.field_name().empty()) {
    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.index_name().empty()) {
    index_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.DropIndexRequest)
}

void DropIndexRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropIndexRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

DropIndexRequest::~DropIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.DropIndexRequest)
  SharedDtor();
}

void DropIndexRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DropIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropIndexRequest& DropIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropIndexRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void DropIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.DropIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DropIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.DropIndexRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.DropIndexRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_field_name(), ptr, ctx, "milvus.proto.milvus.DropIndexRequest.field_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_index_name(), ptr, ctx, "milvus.proto.milvus.DropIndexRequest.index_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DropIndexRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.DropIndexRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DropIndexRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DropIndexRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->field_name().data(), static_cast<int>(this->field_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DropIndexRequest.field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string index_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_index_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->index_name().data(), static_cast<int>(this->index_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.DropIndexRequest.index_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.DropIndexRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.DropIndexRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DropIndexRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.DropIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.field_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->field_name(), output);
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_name().data(), static_cast<int>(this->index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.index_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->index_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.DropIndexRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DropIndexRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.DropIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.field_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->field_name(), target);
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_name().data(), static_cast<int>(this->index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.DropIndexRequest.index_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->index_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.DropIndexRequest)
  return target;
}

size_t DropIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.DropIndexRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // string field_name = 4;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->field_name());
  }

  // string index_name = 5;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->index_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.DropIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.DropIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.DropIndexRequest)
    MergeFrom(*source);
  }
}

void DropIndexRequest::MergeFrom(const DropIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.DropIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  if (from.index_name().size() > 0) {

    index_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void DropIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.DropIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropIndexRequest::CopyFrom(const DropIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.DropIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropIndexRequest::IsInitialized() const {
  return true;
}

void DropIndexRequest::InternalSwap(DropIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InsertRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_InsertRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class InsertRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const InsertRequest* msg);
};

const ::milvus::proto::common::MsgBase&
InsertRequest::_Internal::base(const InsertRequest* msg) {
  return *msg->base_;
}
void InsertRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void InsertRequest::clear_row_data() {
  row_data_.Clear();
}
InsertRequest::InsertRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.InsertRequest)
}
InsertRequest::InsertRequest(const InsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      row_data_(from.row_data_),
      hash_keys_(from.hash_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.partition_name().empty()) {
    partition_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.InsertRequest)
}

void InsertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

InsertRequest::~InsertRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.InsertRequest)
  SharedDtor();
}

void InsertRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void InsertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertRequest& InsertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void InsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.InsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_data_.Clear();
  hash_keys_.Clear();
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InsertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.InsertRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.InsertRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partition_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_partition_name(), ptr, ctx, "milvus.proto.milvus.InsertRequest.partition_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.Blob row_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_row_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated uint32 hash_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_hash_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          add_hash_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InsertRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.InsertRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.InsertRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.InsertRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partition_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->partition_name().data(), static_cast<int>(this->partition_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.InsertRequest.partition_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.proto.common.Blob row_data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_row_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hash_keys = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hash_keys())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_hash_keys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.InsertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.InsertRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InsertRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.InsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.InsertRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.InsertRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_name().data(), static_cast<int>(this->partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.InsertRequest.partition_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->partition_name(), output);
  }

  // repeated .milvus.proto.common.Blob row_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->row_data(static_cast<int>(i)),
      output);
  }

  // repeated uint32 hash_keys = 6;
  if (this->hash_keys_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hash_keys_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->hash_keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->hash_keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.InsertRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.InsertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.InsertRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.InsertRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_name().data(), static_cast<int>(this->partition_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.InsertRequest.partition_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->partition_name(), target);
  }

  // repeated .milvus.proto.common.Blob row_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->row_data(static_cast<int>(i)), target);
  }

  // repeated uint32 hash_keys = 6;
  if (this->hash_keys_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _hash_keys_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->hash_keys_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.InsertRequest)
  return target;
}

size_t InsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.InsertRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.common.Blob row_data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->row_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->row_data(static_cast<int>(i)));
    }
  }

  // repeated uint32 hash_keys = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->hash_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hash_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // string partition_name = 4;
  if (this->partition_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->partition_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.InsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.InsertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.InsertRequest)
    MergeFrom(*source);
  }
}

void InsertRequest::MergeFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.InsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_data_.MergeFrom(from.row_data_);
  hash_keys_.MergeFrom(from.hash_keys_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.partition_name().size() > 0) {

    partition_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void InsertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertRequest::CopyFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRequest::IsInitialized() const {
  return true;
}

void InsertRequest::InternalSwap(InsertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&row_data_)->InternalSwap(CastToBase(&other->row_data_));
  hash_keys_.InternalSwap(&other->hash_keys_);
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partition_name_.Swap(&other->partition_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InsertResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_InsertResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class InsertResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const InsertResponse* msg);
};

const ::milvus::proto::common::Status&
InsertResponse::_Internal::status(const InsertResponse* msg) {
  return *msg->status_;
}
void InsertResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
InsertResponse::InsertResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.InsertResponse)
}
InsertResponse::InsertResponse(const InsertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&rowid_begin_, &from.rowid_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&rowid_end_) -
    reinterpret_cast<char*>(&rowid_begin_)) + sizeof(rowid_end_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.InsertResponse)
}

void InsertResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertResponse_milvus_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rowid_end_) -
      reinterpret_cast<char*>(&status_)) + sizeof(rowid_end_));
}

InsertResponse::~InsertResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.InsertResponse)
  SharedDtor();
}

void InsertResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void InsertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertResponse& InsertResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void InsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.InsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&rowid_begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rowid_end_) -
      reinterpret_cast<char*>(&rowid_begin_)) + sizeof(rowid_end_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InsertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rowID_begin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rowid_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rowID_end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rowid_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InsertResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.InsertResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rowID_begin = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rowid_begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rowID_end = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rowid_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.InsertResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.InsertResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InsertResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.InsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // int64 rowID_begin = 2;
  if (this->rowid_begin() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->rowid_begin(), output);
  }

  // int64 rowID_end = 3;
  if (this->rowid_end() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->rowid_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.InsertResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.InsertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // int64 rowID_begin = 2;
  if (this->rowid_begin() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->rowid_begin(), target);
  }

  // int64 rowID_end = 3;
  if (this->rowid_end() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->rowid_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.InsertResponse)
  return target;
}

size_t InsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.InsertResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 rowID_begin = 2;
  if (this->rowid_begin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->rowid_begin());
  }

  // int64 rowID_end = 3;
  if (this->rowid_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->rowid_end());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.InsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.InsertResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.InsertResponse)
    MergeFrom(*source);
  }
}

void InsertResponse::MergeFrom(const InsertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.InsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
  if (from.rowid_begin() != 0) {
    set_rowid_begin(from.rowid_begin());
  }
  if (from.rowid_end() != 0) {
    set_rowid_end(from.rowid_end());
  }
}

void InsertResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.InsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertResponse::CopyFrom(const InsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.InsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertResponse::IsInitialized() const {
  return true;
}

void InsertResponse::InternalSwap(InsertResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(rowid_begin_, other->rowid_begin_);
  swap(rowid_end_, other->rowid_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceholderValue::InitAsDefaultInstance() {
}
class PlaceholderValue::_Internal {
 public:
};

PlaceholderValue::PlaceholderValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.PlaceholderValue)
}
PlaceholderValue::PlaceholderValue(const PlaceholderValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.tag().empty()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.PlaceholderValue)
}

void PlaceholderValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceholderValue_milvus_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

PlaceholderValue::~PlaceholderValue() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.PlaceholderValue)
  SharedDtor();
}

void PlaceholderValue::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlaceholderValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceholderValue& PlaceholderValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceholderValue_milvus_2eproto.base);
  return *internal_default_instance();
}


void PlaceholderValue::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.PlaceholderValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlaceholderValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tag(), ptr, ctx, "milvus.proto.milvus.PlaceholderValue.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.milvus.PlaceholderType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::milvus::proto::milvus::PlaceholderType>(val));
        } else goto handle_unusual;
        continue;
      // repeated bytes values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_values(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlaceholderValue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.PlaceholderValue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.PlaceholderValue.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .milvus.proto.milvus.PlaceholderType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::milvus::proto::milvus::PlaceholderType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes values = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.PlaceholderValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.PlaceholderValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlaceholderValue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.PlaceholderValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.PlaceholderValue.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // .milvus.proto.milvus.PlaceholderType type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated bytes values = 3;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      3, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.PlaceholderValue)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceholderValue::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.PlaceholderValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.PlaceholderValue.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // .milvus.proto.milvus.PlaceholderType type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated bytes values = 3;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(3, this->values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.PlaceholderValue)
  return target;
}

size_t PlaceholderValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.PlaceholderValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->values_size());
  for (int i = 0, n = this->values_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->values(i));
  }

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // .milvus.proto.milvus.PlaceholderType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceholderValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.PlaceholderValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceholderValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceholderValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.PlaceholderValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.PlaceholderValue)
    MergeFrom(*source);
  }
}

void PlaceholderValue::MergeFrom(const PlaceholderValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.PlaceholderValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PlaceholderValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.PlaceholderValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceholderValue::CopyFrom(const PlaceholderValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.PlaceholderValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderValue::IsInitialized() const {
  return true;
}

void PlaceholderValue::InternalSwap(PlaceholderValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(CastToBase(&other->values_));
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceholderGroup::InitAsDefaultInstance() {
}
class PlaceholderGroup::_Internal {
 public:
};

PlaceholderGroup::PlaceholderGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.PlaceholderGroup)
}
PlaceholderGroup::PlaceholderGroup(const PlaceholderGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      placeholders_(from.placeholders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.PlaceholderGroup)
}

void PlaceholderGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceholderGroup_milvus_2eproto.base);
}

PlaceholderGroup::~PlaceholderGroup() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.PlaceholderGroup)
  SharedDtor();
}

void PlaceholderGroup::SharedDtor() {
}

void PlaceholderGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceholderGroup& PlaceholderGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceholderGroup_milvus_2eproto.base);
  return *internal_default_instance();
}


void PlaceholderGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.PlaceholderGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placeholders_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlaceholderGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .milvus.proto.milvus.PlaceholderValue placeholders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_placeholders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlaceholderGroup::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.PlaceholderGroup)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .milvus.proto.milvus.PlaceholderValue placeholders = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_placeholders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.PlaceholderGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.PlaceholderGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlaceholderGroup::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.PlaceholderGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.PlaceholderValue placeholders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->placeholders_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->placeholders(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.PlaceholderGroup)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceholderGroup::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.PlaceholderGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.PlaceholderValue placeholders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->placeholders_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->placeholders(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.PlaceholderGroup)
  return target;
}

size_t PlaceholderGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.PlaceholderGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.PlaceholderValue placeholders = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->placeholders_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->placeholders(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceholderGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.PlaceholderGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceholderGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceholderGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.PlaceholderGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.PlaceholderGroup)
    MergeFrom(*source);
  }
}

void PlaceholderGroup::MergeFrom(const PlaceholderGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.PlaceholderGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  placeholders_.MergeFrom(from.placeholders_);
}

void PlaceholderGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.PlaceholderGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceholderGroup::CopyFrom(const PlaceholderGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.PlaceholderGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderGroup::IsInitialized() const {
  return true;
}

void PlaceholderGroup::InternalSwap(PlaceholderGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&placeholders_)->InternalSwap(CastToBase(&other->placeholders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_SearchRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class SearchRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const SearchRequest* msg);
};

const ::milvus::proto::common::MsgBase&
SearchRequest::_Internal::base(const SearchRequest* msg) {
  return *msg->base_;
}
void SearchRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
SearchRequest::SearchRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      partition_names_(from.partition_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collection_name().empty()) {
    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  dsl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.dsl().empty()) {
    dsl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dsl_);
  }
  placeholder_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.placeholder_group().empty()) {
    placeholder_group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.placeholder_group_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SearchRequest)
}

void SearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dsl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeholder_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SearchRequest)
  SharedDtor();
}

void SearchRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dsl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeholder_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void SearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchRequest& SearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_names_.Clear();
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dsl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeholder_group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.SearchRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collection_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collection_name(), ptr, ctx, "milvus.proto.milvus.SearchRequest.collection_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string partition_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_partition_names(), ptr, ctx, "milvus.proto.milvus.SearchRequest.partition_names");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // string dsl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_dsl(), ptr, ctx, "milvus.proto.milvus.SearchRequest.dsl");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes placeholder_group = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_placeholder_group(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.SearchRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.SearchRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), static_cast<int>(this->collection_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.SearchRequest.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string partition_names = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_partition_names()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->partition_names(this->partition_names_size() - 1).data(),
            static_cast<int>(this->partition_names(this->partition_names_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.SearchRequest.partition_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dsl = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dsl()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->dsl().data(), static_cast<int>(this->dsl().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.SearchRequest.dsl"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes placeholder_group = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_placeholder_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.SearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.SearchRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.SearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.collection_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->partition_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_names(i).data(), static_cast<int>(this->partition_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.partition_names");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->partition_names(i), output);
  }

  // string dsl = 5;
  if (this->dsl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dsl().data(), static_cast<int>(this->dsl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.dsl");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dsl(), output);
  }

  // bytes placeholder_group = 6;
  if (this->placeholder_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->placeholder_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.SearchRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), static_cast<int>(this->collection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.collection_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // repeated string partition_names = 4;
  for (int i = 0, n = this->partition_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->partition_names(i).data(), static_cast<int>(this->partition_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.partition_names");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->partition_names(i), target);
  }

  // string dsl = 5;
  if (this->dsl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dsl().data(), static_cast<int>(this->dsl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.SearchRequest.dsl");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->dsl(), target);
  }

  // bytes placeholder_group = 6;
  if (this->placeholder_group().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->placeholder_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SearchRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partition_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->partition_names_size());
  for (int i = 0, n = this->partition_names_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->partition_names(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // string dsl = 5;
  if (this->dsl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->dsl());
  }

  // bytes placeholder_group = 6;
  if (this->placeholder_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->placeholder_group());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.SearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.SearchRequest)
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_names_.MergeFrom(from.partition_names_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.dsl().size() > 0) {

    dsl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dsl_);
  }
  if (from.placeholder_group().size() > 0) {

    placeholder_group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.placeholder_group_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void SearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partition_names_.InternalSwap(CastToBase(&other->partition_names_));
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collection_name_.Swap(&other->collection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dsl_.Swap(&other->dsl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  placeholder_group_.Swap(&other->placeholder_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hits::InitAsDefaultInstance() {
}
class Hits::_Internal {
 public:
};

Hits::Hits()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.Hits)
}
Hits::Hits(const Hits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_),
      row_data_(from.row_data_),
      scores_(from.scores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.Hits)
}

void Hits::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Hits_milvus_2eproto.base);
}

Hits::~Hits() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.Hits)
  SharedDtor();
}

void Hits::SharedDtor() {
}

void Hits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hits& Hits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hits_milvus_2eproto.base);
  return *internal_default_instance();
}


void Hits::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.Hits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  row_data_.Clear();
  scores_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Hits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 IDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes row_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_row_data(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated float scores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_scores(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_scores(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Hits::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.Hits)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 IDs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes row_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_row_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float scores = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scores())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_scores())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.Hits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.Hits)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Hits::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.Hits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 IDs = 1;
  if (this->ids_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->ids(i), output);
  }

  // repeated bytes row_data = 2;
  for (int i = 0, n = this->row_data_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->row_data(i), output);
  }

  // repeated float scores = 3;
  if (this->scores_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_scores_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->scores().data(), this->scores_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.Hits)
}

::PROTOBUF_NAMESPACE_ID::uint8* Hits::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.Hits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 IDs = 1;
  if (this->ids_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->ids_, target);
  }

  // repeated bytes row_data = 2;
  for (int i = 0, n = this->row_data_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->row_data(i), target);
  }

  // repeated float scores = 3;
  if (this->scores_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _scores_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->scores_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.Hits)
  return target;
}

size_t Hits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.Hits)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 IDs = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes row_data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->row_data_size());
  for (int i = 0, n = this->row_data_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->row_data(i));
  }

  // repeated float scores = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->scores_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _scores_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.Hits)
  GOOGLE_DCHECK_NE(&from, this);
  const Hits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.Hits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.Hits)
    MergeFrom(*source);
  }
}

void Hits::MergeFrom(const Hits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.Hits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  row_data_.MergeFrom(from.row_data_);
  scores_.MergeFrom(from.scores_);
}

void Hits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.Hits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hits::CopyFrom(const Hits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.Hits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hits::IsInitialized() const {
  return true;
}

void Hits::InternalSwap(Hits* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  row_data_.InternalSwap(CastToBase(&other->row_data_));
  scores_.InternalSwap(&other->scores_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hits::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchResults::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_SearchResults_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class SearchResults::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const SearchResults* msg);
};

const ::milvus::proto::common::Status&
SearchResults::_Internal::status(const SearchResults* msg) {
  return *msg->status_;
}
void SearchResults::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SearchResults::SearchResults()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.SearchResults)
}
SearchResults::SearchResults(const SearchResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hits_(from.hits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.SearchResults)
}

void SearchResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchResults_milvus_2eproto.base);
  status_ = nullptr;
}

SearchResults::~SearchResults() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.SearchResults)
  SharedDtor();
}

void SearchResults::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void SearchResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchResults& SearchResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchResults_milvus_2eproto.base);
  return *internal_default_instance();
}


void SearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.SearchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes hits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_hits(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchResults::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.SearchResults)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes hits = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_hits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.SearchResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.SearchResults)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchResults::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.SearchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // repeated bytes hits = 2;
  for (int i = 0, n = this->hits_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->hits(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.SearchResults)
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchResults::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.SearchResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // repeated bytes hits = 2;
  for (int i = 0, n = this->hits_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->hits(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.SearchResults)
  return target;
}

size_t SearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.SearchResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes hits = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->hits_size());
  for (int i = 0, n = this->hits_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->hits(i));
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.SearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.SearchResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.SearchResults)
    MergeFrom(*source);
  }
}

void SearchResults::MergeFrom(const SearchResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.SearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
}

void SearchResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.SearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResults::CopyFrom(const SearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.SearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResults::IsInitialized() const {
  return true;
}

void SearchResults::InternalSwap(SearchResults* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hits_.InternalSwap(CastToBase(&other->hits_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_FlushRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class FlushRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const FlushRequest* msg);
};

const ::milvus::proto::common::MsgBase&
FlushRequest::_Internal::base(const FlushRequest* msg) {
  return *msg->base_;
}
void FlushRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
FlushRequest::FlushRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.FlushRequest)
}
FlushRequest::FlushRequest(const FlushRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collection_names_(from.collection_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_name().empty()) {
    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.FlushRequest)
}

void FlushRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlushRequest_milvus_2eproto.base);
  db_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

FlushRequest::~FlushRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.FlushRequest)
  SharedDtor();
}

void FlushRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void FlushRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushRequest& FlushRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void FlushRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.FlushRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_names_.Clear();
  db_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_name(), ptr, ctx, "milvus.proto.milvus.FlushRequest.db_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string collection_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_collection_names(), ptr, ctx, "milvus.proto.milvus.FlushRequest.collection_names");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.FlushRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.FlushRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string collection_names = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_collection_names()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collection_names(this->collection_names_size() - 1).data(),
            static_cast<int>(this->collection_names(this->collection_names_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.FlushRequest.collection_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.FlushRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.FlushRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.FlushRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.FlushRequest.db_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // repeated string collection_names = 3;
  for (int i = 0, n = this->collection_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_names(i).data(), static_cast<int>(this->collection_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.FlushRequest.collection_names");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->collection_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.FlushRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.FlushRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.FlushRequest.db_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // repeated string collection_names = 3;
  for (int i = 0, n = this->collection_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collection_names(i).data(), static_cast<int>(this->collection_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.FlushRequest.collection_names");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->collection_names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.FlushRequest)
  return target;
}

size_t FlushRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.FlushRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collection_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->collection_names_size());
  for (int i = 0, n = this->collection_names_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->collection_names(i));
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.FlushRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.FlushRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.FlushRequest)
    MergeFrom(*source);
  }
}

void FlushRequest::MergeFrom(const FlushRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.FlushRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collection_names_.MergeFrom(from.collection_names_);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void FlushRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.FlushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushRequest::CopyFrom(const FlushRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.FlushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRequest::IsInitialized() const {
  return true;
}

void FlushRequest::InternalSwap(FlushRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collection_names_.InternalSwap(CastToBase(&other->collection_names_));
  db_name_.Swap(&other->db_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PersistentSegmentInfo::InitAsDefaultInstance() {
}
class PersistentSegmentInfo::_Internal {
 public:
};

PersistentSegmentInfo::PersistentSegmentInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.PersistentSegmentInfo)
}
PersistentSegmentInfo::PersistentSegmentInfo(const PersistentSegmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&segmentid_, &from.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&segmentid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.PersistentSegmentInfo)
}

void PersistentSegmentInfo::SharedCtor() {
  ::memset(&segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&segmentid_)) + sizeof(state_));
}

PersistentSegmentInfo::~PersistentSegmentInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.PersistentSegmentInfo)
  SharedDtor();
}

void PersistentSegmentInfo::SharedDtor() {
}

void PersistentSegmentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistentSegmentInfo& PersistentSegmentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistentSegmentInfo_milvus_2eproto.base);
  return *internal_default_instance();
}


void PersistentSegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.PersistentSegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&segmentid_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PersistentSegmentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 open_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          open_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sealed_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sealed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 flushed_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flushed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_rows = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mem_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          mem_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.SegmentState state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::milvus::proto::common::SegmentState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PersistentSegmentInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.PersistentSegmentInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 segmentID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &segmentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 collectionID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &collectionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 partitionID = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &partitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 open_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sealed_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sealed_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 flushed_time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flushed_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_rows = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 mem_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .milvus.proto.common.SegmentState state = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::milvus::proto::common::SegmentState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.PersistentSegmentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.PersistentSegmentInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PersistentSegmentInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.PersistentSegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->segmentid(), output);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->collectionid(), output);
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->partitionid(), output);
  }

  // uint64 open_time = 4;
  if (this->open_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->open_time(), output);
  }

  // uint64 sealed_time = 5;
  if (this->sealed_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->sealed_time(), output);
  }

  // uint64 flushed_time = 6;
  if (this->flushed_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->flushed_time(), output);
  }

  // int64 num_rows = 7;
  if (this->num_rows() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->num_rows(), output);
  }

  // int64 mem_size = 8;
  if (this->mem_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->mem_size(), output);
  }

  // .milvus.proto.common.SegmentState state = 9;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.PersistentSegmentInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* PersistentSegmentInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.PersistentSegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->segmentid(), target);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->partitionid(), target);
  }

  // uint64 open_time = 4;
  if (this->open_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->open_time(), target);
  }

  // uint64 sealed_time = 5;
  if (this->sealed_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->sealed_time(), target);
  }

  // uint64 flushed_time = 6;
  if (this->flushed_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->flushed_time(), target);
  }

  // int64 num_rows = 7;
  if (this->num_rows() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->num_rows(), target);
  }

  // int64 mem_size = 8;
  if (this->mem_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->mem_size(), target);
  }

  // .milvus.proto.common.SegmentState state = 9;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.PersistentSegmentInfo)
  return target;
}

size_t PersistentSegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.PersistentSegmentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->segmentid());
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->collectionid());
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->partitionid());
  }

  // uint64 open_time = 4;
  if (this->open_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->open_time());
  }

  // uint64 sealed_time = 5;
  if (this->sealed_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sealed_time());
  }

  // uint64 flushed_time = 6;
  if (this->flushed_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->flushed_time());
  }

  // int64 num_rows = 7;
  if (this->num_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->num_rows());
  }

  // int64 mem_size = 8;
  if (this->mem_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->mem_size());
  }

  // .milvus.proto.common.SegmentState state = 9;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistentSegmentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.PersistentSegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PersistentSegmentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PersistentSegmentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.PersistentSegmentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.PersistentSegmentInfo)
    MergeFrom(*source);
  }
}

void PersistentSegmentInfo::MergeFrom(const PersistentSegmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.PersistentSegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.segmentid() != 0) {
    set_segmentid(from.segmentid());
  }
  if (from.collectionid() != 0) {
    set_collectionid(from.collectionid());
  }
  if (from.partitionid() != 0) {
    set_partitionid(from.partitionid());
  }
  if (from.open_time() != 0) {
    set_open_time(from.open_time());
  }
  if (from.sealed_time() != 0) {
    set_sealed_time(from.sealed_time());
  }
  if (from.flushed_time() != 0) {
    set_flushed_time(from.flushed_time());
  }
  if (from.num_rows() != 0) {
    set_num_rows(from.num_rows());
  }
  if (from.mem_size() != 0) {
    set_mem_size(from.mem_size());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void PersistentSegmentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.PersistentSegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersistentSegmentInfo::CopyFrom(const PersistentSegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.PersistentSegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistentSegmentInfo::IsInitialized() const {
  return true;
}

void PersistentSegmentInfo::InternalSwap(PersistentSegmentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(segmentid_, other->segmentid_);
  swap(collectionid_, other->collectionid_);
  swap(partitionid_, other->partitionid_);
  swap(open_time_, other->open_time_);
  swap(sealed_time_, other->sealed_time_);
  swap(flushed_time_, other->flushed_time_);
  swap(num_rows_, other->num_rows_);
  swap(mem_size_, other->mem_size_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistentSegmentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPersistentSegmentInfoRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetPersistentSegmentInfoRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetPersistentSegmentInfoRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetPersistentSegmentInfoRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetPersistentSegmentInfoRequest::_Internal::base(const GetPersistentSegmentInfoRequest* msg) {
  return *msg->base_;
}
void GetPersistentSegmentInfoRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetPersistentSegmentInfoRequest::GetPersistentSegmentInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
}
GetPersistentSegmentInfoRequest::GetPersistentSegmentInfoRequest(const GetPersistentSegmentInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.dbname().empty()) {
    dbname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collectionname().empty()) {
    collectionname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collectionname_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
}

void GetPersistentSegmentInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPersistentSegmentInfoRequest_milvus_2eproto.base);
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetPersistentSegmentInfoRequest::~GetPersistentSegmentInfoRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  SharedDtor();
}

void GetPersistentSegmentInfoRequest::SharedDtor() {
  dbname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetPersistentSegmentInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPersistentSegmentInfoRequest& GetPersistentSegmentInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPersistentSegmentInfoRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetPersistentSegmentInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetPersistentSegmentInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dbName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_dbname(), ptr, ctx, "milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collectionname(), ptr, ctx, "milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetPersistentSegmentInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dbName = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->dbname().data(), static_cast<int>(this->dbname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collectionName = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collectionname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collectionname().data(), static_cast<int>(this->collectionname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetPersistentSegmentInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string dbName = 2;
  if (this->dbname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dbname(), output);
  }

  // string collectionName = 3;
  if (this->collectionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collectionname().data(), static_cast<int>(this->collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collectionname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPersistentSegmentInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string dbName = 2;
  if (this->dbname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPersistentSegmentInfoRequest.dbName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->dbname(), target);
  }

  // string collectionName = 3;
  if (this->collectionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collectionname().data(), static_cast<int>(this->collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetPersistentSegmentInfoRequest.collectionName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collectionname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  return target;
}

size_t GetPersistentSegmentInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dbName = 2;
  if (this->dbname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->dbname());
  }

  // string collectionName = 3;
  if (this->collectionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collectionname());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPersistentSegmentInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPersistentSegmentInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPersistentSegmentInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
    MergeFrom(*source);
  }
}

void GetPersistentSegmentInfoRequest::MergeFrom(const GetPersistentSegmentInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dbname().size() > 0) {

    dbname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  if (from.collectionname().size() > 0) {

    collectionname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collectionname_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void GetPersistentSegmentInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersistentSegmentInfoRequest::CopyFrom(const GetPersistentSegmentInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetPersistentSegmentInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersistentSegmentInfoRequest::IsInitialized() const {
  return true;
}

void GetPersistentSegmentInfoRequest::InternalSwap(GetPersistentSegmentInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dbname_.Swap(&other->dbname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collectionname_.Swap(&other->collectionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPersistentSegmentInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPersistentSegmentInfoResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetPersistentSegmentInfoResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetPersistentSegmentInfoResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetPersistentSegmentInfoResponse* msg);
};

const ::milvus::proto::common::Status&
GetPersistentSegmentInfoResponse::_Internal::status(const GetPersistentSegmentInfoResponse* msg) {
  return *msg->status_;
}
void GetPersistentSegmentInfoResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetPersistentSegmentInfoResponse::GetPersistentSegmentInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
}
GetPersistentSegmentInfoResponse::GetPersistentSegmentInfoResponse(const GetPersistentSegmentInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
}

void GetPersistentSegmentInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPersistentSegmentInfoResponse_milvus_2eproto.base);
  status_ = nullptr;
}

GetPersistentSegmentInfoResponse::~GetPersistentSegmentInfoResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  SharedDtor();
}

void GetPersistentSegmentInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GetPersistentSegmentInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPersistentSegmentInfoResponse& GetPersistentSegmentInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPersistentSegmentInfoResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetPersistentSegmentInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetPersistentSegmentInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetPersistentSegmentInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetPersistentSegmentInfoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->infos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPersistentSegmentInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->infos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  return target;
}

size_t GetPersistentSegmentInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.PersistentSegmentInfo infos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->infos(static_cast<int>(i)));
    }
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPersistentSegmentInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPersistentSegmentInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPersistentSegmentInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
    MergeFrom(*source);
  }
}

void GetPersistentSegmentInfoResponse::MergeFrom(const GetPersistentSegmentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
}

void GetPersistentSegmentInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersistentSegmentInfoResponse::CopyFrom(const GetPersistentSegmentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetPersistentSegmentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersistentSegmentInfoResponse::IsInitialized() const {
  return true;
}

void GetPersistentSegmentInfoResponse::InternalSwap(GetPersistentSegmentInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&infos_)->InternalSwap(CastToBase(&other->infos_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPersistentSegmentInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuerySegmentInfo::InitAsDefaultInstance() {
}
class QuerySegmentInfo::_Internal {
 public:
};

QuerySegmentInfo::QuerySegmentInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.QuerySegmentInfo)
}
QuerySegmentInfo::QuerySegmentInfo(const QuerySegmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.index_name().empty()) {
    index_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_name_);
  }
  ::memcpy(&segmentid_, &from.segmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&indexid_) -
    reinterpret_cast<char*>(&segmentid_)) + sizeof(indexid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.QuerySegmentInfo)
}

void QuerySegmentInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuerySegmentInfo_milvus_2eproto.base);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indexid_) -
      reinterpret_cast<char*>(&segmentid_)) + sizeof(indexid_));
}

QuerySegmentInfo::~QuerySegmentInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.QuerySegmentInfo)
  SharedDtor();
}

void QuerySegmentInfo::SharedDtor() {
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuerySegmentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuerySegmentInfo& QuerySegmentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuerySegmentInfo_milvus_2eproto.base);
  return *internal_default_instance();
}


void QuerySegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.QuerySegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&segmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indexid_) -
      reinterpret_cast<char*>(&segmentid_)) + sizeof(indexid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuerySegmentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 segmentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          segmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          collectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 partitionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mem_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mem_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_index_name(), ptr, ctx, "milvus.proto.milvus.QuerySegmentInfo.index_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 indexID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuerySegmentInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.QuerySegmentInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 segmentID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &segmentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 collectionID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &collectionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 partitionID = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &partitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 mem_size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_rows = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string index_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_index_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->index_name().data(), static_cast<int>(this->index_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.QuerySegmentInfo.index_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 indexID = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &indexid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.QuerySegmentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.QuerySegmentInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuerySegmentInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.QuerySegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->segmentid(), output);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->collectionid(), output);
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->partitionid(), output);
  }

  // int64 mem_size = 4;
  if (this->mem_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->mem_size(), output);
  }

  // int64 num_rows = 5;
  if (this->num_rows() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->num_rows(), output);
  }

  // string index_name = 6;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_name().data(), static_cast<int>(this->index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QuerySegmentInfo.index_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->index_name(), output);
  }

  // int64 indexID = 7;
  if (this->indexid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->indexid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.QuerySegmentInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* QuerySegmentInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.QuerySegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->segmentid(), target);
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->collectionid(), target);
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->partitionid(), target);
  }

  // int64 mem_size = 4;
  if (this->mem_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->mem_size(), target);
  }

  // int64 num_rows = 5;
  if (this->num_rows() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->num_rows(), target);
  }

  // string index_name = 6;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_name().data(), static_cast<int>(this->index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.QuerySegmentInfo.index_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->index_name(), target);
  }

  // int64 indexID = 7;
  if (this->indexid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->indexid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.QuerySegmentInfo)
  return target;
}

size_t QuerySegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.QuerySegmentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index_name = 6;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->index_name());
  }

  // int64 segmentID = 1;
  if (this->segmentid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->segmentid());
  }

  // int64 collectionID = 2;
  if (this->collectionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->collectionid());
  }

  // int64 partitionID = 3;
  if (this->partitionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->partitionid());
  }

  // int64 mem_size = 4;
  if (this->mem_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->mem_size());
  }

  // int64 num_rows = 5;
  if (this->num_rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->num_rows());
  }

  // int64 indexID = 7;
  if (this->indexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->indexid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuerySegmentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.QuerySegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QuerySegmentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuerySegmentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.QuerySegmentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.QuerySegmentInfo)
    MergeFrom(*source);
  }
}

void QuerySegmentInfo::MergeFrom(const QuerySegmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.QuerySegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index_name().size() > 0) {

    index_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_name_);
  }
  if (from.segmentid() != 0) {
    set_segmentid(from.segmentid());
  }
  if (from.collectionid() != 0) {
    set_collectionid(from.collectionid());
  }
  if (from.partitionid() != 0) {
    set_partitionid(from.partitionid());
  }
  if (from.mem_size() != 0) {
    set_mem_size(from.mem_size());
  }
  if (from.num_rows() != 0) {
    set_num_rows(from.num_rows());
  }
  if (from.indexid() != 0) {
    set_indexid(from.indexid());
  }
}

void QuerySegmentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.QuerySegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySegmentInfo::CopyFrom(const QuerySegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.QuerySegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySegmentInfo::IsInitialized() const {
  return true;
}

void QuerySegmentInfo::InternalSwap(QuerySegmentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(segmentid_, other->segmentid_);
  swap(collectionid_, other->collectionid_);
  swap(partitionid_, other->partitionid_);
  swap(mem_size_, other->mem_size_);
  swap(num_rows_, other->num_rows_);
  swap(indexid_, other->indexid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySegmentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetQuerySegmentInfoRequest::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetQuerySegmentInfoRequest_default_instance_._instance.get_mutable()->base_ = const_cast< ::milvus::proto::common::MsgBase*>(
      ::milvus::proto::common::MsgBase::internal_default_instance());
}
class GetQuerySegmentInfoRequest::_Internal {
 public:
  static const ::milvus::proto::common::MsgBase& base(const GetQuerySegmentInfoRequest* msg);
};

const ::milvus::proto::common::MsgBase&
GetQuerySegmentInfoRequest::_Internal::base(const GetQuerySegmentInfoRequest* msg) {
  return *msg->base_;
}
void GetQuerySegmentInfoRequest::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetQuerySegmentInfoRequest::GetQuerySegmentInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.GetQuerySegmentInfoRequest)
}
GetQuerySegmentInfoRequest::GetQuerySegmentInfoRequest(const GetQuerySegmentInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.dbname().empty()) {
    dbname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.collectionname().empty()) {
    collectionname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collectionname_);
  }
  if (from.has_base()) {
    base_ = new ::milvus::proto::common::MsgBase(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetQuerySegmentInfoRequest)
}

void GetQuerySegmentInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetQuerySegmentInfoRequest_milvus_2eproto.base);
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

GetQuerySegmentInfoRequest::~GetQuerySegmentInfoRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  SharedDtor();
}

void GetQuerySegmentInfoRequest::SharedDtor() {
  dbname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetQuerySegmentInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetQuerySegmentInfoRequest& GetQuerySegmentInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetQuerySegmentInfoRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetQuerySegmentInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collectionname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetQuerySegmentInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dbName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_dbname(), ptr, ctx, "milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collectionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_collectionname(), ptr, ctx, "milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetQuerySegmentInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.MsgBase base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dbName = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->dbname().data(), static_cast<int>(this->dbname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collectionName = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_collectionname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->collectionname().data(), static_cast<int>(this->collectionname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetQuerySegmentInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // string dbName = 2;
  if (this->dbname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dbname(), output);
  }

  // string collectionName = 3;
  if (this->collectionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collectionname().data(), static_cast<int>(this->collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collectionname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.GetQuerySegmentInfoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetQuerySegmentInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // string dbName = 2;
  if (this->dbname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dbname().data(), static_cast<int>(this->dbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetQuerySegmentInfoRequest.dbName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->dbname(), target);
  }

  // string collectionName = 3;
  if (this->collectionname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->collectionname().data(), static_cast<int>(this->collectionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.milvus.GetQuerySegmentInfoRequest.collectionName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->collectionname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  return target;
}

size_t GetQuerySegmentInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dbName = 2;
  if (this->dbname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->dbname());
  }

  // string collectionName = 3;
  if (this->collectionname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->collectionname());
  }

  // .milvus.proto.common.MsgBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetQuerySegmentInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetQuerySegmentInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetQuerySegmentInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetQuerySegmentInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetQuerySegmentInfoRequest)
    MergeFrom(*source);
  }
}

void GetQuerySegmentInfoRequest::MergeFrom(const GetQuerySegmentInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dbname().size() > 0) {

    dbname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dbname_);
  }
  if (from.collectionname().size() > 0) {

    collectionname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collectionname_);
  }
  if (from.has_base()) {
    mutable_base()->::milvus::proto::common::MsgBase::MergeFrom(from.base());
  }
}

void GetQuerySegmentInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQuerySegmentInfoRequest::CopyFrom(const GetQuerySegmentInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetQuerySegmentInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuerySegmentInfoRequest::IsInitialized() const {
  return true;
}

void GetQuerySegmentInfoRequest::InternalSwap(GetQuerySegmentInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dbname_.Swap(&other->dbname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  collectionname_.Swap(&other->collectionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetQuerySegmentInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetQuerySegmentInfoResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_GetQuerySegmentInfoResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetQuerySegmentInfoResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetQuerySegmentInfoResponse* msg);
};

const ::milvus::proto::common::Status&
GetQuerySegmentInfoResponse::_Internal::status(const GetQuerySegmentInfoResponse* msg) {
  return *msg->status_;
}
void GetQuerySegmentInfoResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetQuerySegmentInfoResponse::GetQuerySegmentInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.GetQuerySegmentInfoResponse)
}
GetQuerySegmentInfoResponse::GetQuerySegmentInfoResponse(const GetQuerySegmentInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.GetQuerySegmentInfoResponse)
}

void GetQuerySegmentInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetQuerySegmentInfoResponse_milvus_2eproto.base);
  status_ = nullptr;
}

GetQuerySegmentInfoResponse::~GetQuerySegmentInfoResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  SharedDtor();
}

void GetQuerySegmentInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GetQuerySegmentInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetQuerySegmentInfoResponse& GetQuerySegmentInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetQuerySegmentInfoResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void GetQuerySegmentInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetQuerySegmentInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetQuerySegmentInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetQuerySegmentInfoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->infos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.GetQuerySegmentInfoResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetQuerySegmentInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->infos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  return target;
}

size_t GetQuerySegmentInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.milvus.QuerySegmentInfo infos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->infos(static_cast<int>(i)));
    }
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetQuerySegmentInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetQuerySegmentInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetQuerySegmentInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.GetQuerySegmentInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.GetQuerySegmentInfoResponse)
    MergeFrom(*source);
  }
}

void GetQuerySegmentInfoResponse::MergeFrom(const GetQuerySegmentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
}

void GetQuerySegmentInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQuerySegmentInfoResponse::CopyFrom(const GetQuerySegmentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.GetQuerySegmentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuerySegmentInfoResponse::IsInitialized() const {
  return true;
}

void GetQuerySegmentInfoResponse::InternalSwap(GetQuerySegmentInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&infos_)->InternalSwap(CastToBase(&other->infos_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetQuerySegmentInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterLinkRequest::InitAsDefaultInstance() {
}
class RegisterLinkRequest::_Internal {
 public:
};

RegisterLinkRequest::RegisterLinkRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.RegisterLinkRequest)
}
RegisterLinkRequest::RegisterLinkRequest(const RegisterLinkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.RegisterLinkRequest)
}

void RegisterLinkRequest::SharedCtor() {
}

RegisterLinkRequest::~RegisterLinkRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.RegisterLinkRequest)
  SharedDtor();
}

void RegisterLinkRequest::SharedDtor() {
}

void RegisterLinkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterLinkRequest& RegisterLinkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterLinkRequest_milvus_2eproto.base);
  return *internal_default_instance();
}


void RegisterLinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.RegisterLinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterLinkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterLinkRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.RegisterLinkRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.RegisterLinkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.RegisterLinkRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterLinkRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.RegisterLinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.RegisterLinkRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterLinkRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.RegisterLinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.RegisterLinkRequest)
  return target;
}

size_t RegisterLinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.RegisterLinkRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterLinkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.RegisterLinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterLinkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterLinkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.RegisterLinkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.RegisterLinkRequest)
    MergeFrom(*source);
  }
}

void RegisterLinkRequest::MergeFrom(const RegisterLinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.RegisterLinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RegisterLinkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.RegisterLinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterLinkRequest::CopyFrom(const RegisterLinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.RegisterLinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterLinkRequest::IsInitialized() const {
  return true;
}

void RegisterLinkRequest::InternalSwap(RegisterLinkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterLinkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterLinkResponse::InitAsDefaultInstance() {
  ::milvus::proto::milvus::_RegisterLinkResponse_default_instance_._instance.get_mutable()->address_ = const_cast< ::milvus::proto::common::Address*>(
      ::milvus::proto::common::Address::internal_default_instance());
  ::milvus::proto::milvus::_RegisterLinkResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class RegisterLinkResponse::_Internal {
 public:
  static const ::milvus::proto::common::Address& address(const RegisterLinkResponse* msg);
  static const ::milvus::proto::common::Status& status(const RegisterLinkResponse* msg);
};

const ::milvus::proto::common::Address&
RegisterLinkResponse::_Internal::address(const RegisterLinkResponse* msg) {
  return *msg->address_;
}
const ::milvus::proto::common::Status&
RegisterLinkResponse::_Internal::status(const RegisterLinkResponse* msg) {
  return *msg->status_;
}
void RegisterLinkResponse::clear_address() {
  if (GetArenaNoVirtual() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
void RegisterLinkResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
RegisterLinkResponse::RegisterLinkResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.milvus.RegisterLinkResponse)
}
RegisterLinkResponse::RegisterLinkResponse(const RegisterLinkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_address()) {
    address_ = new ::milvus::proto::common::Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.milvus.RegisterLinkResponse)
}

void RegisterLinkResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterLinkResponse_milvus_2eproto.base);
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&address_)) + sizeof(status_));
}

RegisterLinkResponse::~RegisterLinkResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.milvus.RegisterLinkResponse)
  SharedDtor();
}

void RegisterLinkResponse::SharedDtor() {
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete status_;
}

void RegisterLinkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterLinkResponse& RegisterLinkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterLinkResponse_milvus_2eproto.base);
  return *internal_default_instance();
}


void RegisterLinkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.milvus.RegisterLinkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterLinkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Address address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.common.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterLinkResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.milvus.RegisterLinkResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Address address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .milvus.proto.common.Status status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.milvus.RegisterLinkResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.milvus.RegisterLinkResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterLinkResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.milvus.RegisterLinkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Address address = 1;
  if (this->has_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::address(this), output);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::status(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.milvus.RegisterLinkResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterLinkResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.milvus.RegisterLinkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Address address = 1;
  if (this->has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::address(this), target);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::status(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.milvus.RegisterLinkResponse)
  return target;
}

size_t RegisterLinkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.milvus.RegisterLinkResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Address address = 1;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .milvus.proto.common.Status status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterLinkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.milvus.RegisterLinkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterLinkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterLinkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.milvus.RegisterLinkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.milvus.RegisterLinkResponse)
    MergeFrom(*source);
  }
}

void RegisterLinkResponse::MergeFrom(const RegisterLinkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.milvus.RegisterLinkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    mutable_address()->::milvus::proto::common::Address::MergeFrom(from.address());
  }
  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
}

void RegisterLinkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.milvus.RegisterLinkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterLinkResponse::CopyFrom(const RegisterLinkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.milvus.RegisterLinkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterLinkResponse::IsInitialized() const {
  return true;
}

void RegisterLinkResponse::InternalSwap(RegisterLinkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(address_, other->address_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterLinkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace milvus
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateCollectionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::CreateCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropCollectionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::DropCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::HasCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::HasCollectionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::HasCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::BoolResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::BoolResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::BoolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::StringResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::StringResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::StringResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeCollectionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::DescribeCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeCollectionResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeCollectionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::DescribeCollectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::LoadCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::LoadCollectionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::LoadCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ReleaseCollectionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ReleaseCollectionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::ReleaseCollectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCollectionStatisticsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCollectionStatisticsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::GetCollectionStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetCollectionStatisticsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetCollectionStatisticsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::GetCollectionStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowCollectionsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowCollectionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::ShowCollectionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowCollectionsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowCollectionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::ShowCollectionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreatePartitionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreatePartitionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::CreatePartitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropPartitionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropPartitionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::DropPartitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::HasPartitionRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::HasPartitionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::HasPartitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::LoadPartitionsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::LoadPartitionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::LoadPartitionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ReleasePartitionsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ReleasePartitionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::ReleasePartitionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetPartitionStatisticsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetPartitionStatisticsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::GetPartitionStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetPartitionStatisticsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetPartitionStatisticsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::GetPartitionStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowPartitionsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowPartitionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::ShowPartitionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowPartitionsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowPartitionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::ShowPartitionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeSegmentRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeSegmentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::DescribeSegmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeSegmentResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeSegmentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::DescribeSegmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowSegmentsRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowSegmentsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::ShowSegmentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::ShowSegmentsResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::ShowSegmentsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::ShowSegmentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::CreateIndexRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::CreateIndexRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::CreateIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeIndexRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeIndexRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::DescribeIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::IndexDescription* Arena::CreateMaybeMessage< ::milvus::proto::milvus::IndexDescription >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::IndexDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DescribeIndexResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DescribeIndexResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::DescribeIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexStateRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::GetIndexStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetIndexStateResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetIndexStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::GetIndexStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::DropIndexRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::DropIndexRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::DropIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::InsertRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::InsertRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::InsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::InsertResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::InsertResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::InsertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::PlaceholderValue* Arena::CreateMaybeMessage< ::milvus::proto::milvus::PlaceholderValue >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::PlaceholderValue >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::PlaceholderGroup* Arena::CreateMaybeMessage< ::milvus::proto::milvus::PlaceholderGroup >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::PlaceholderGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SearchRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::SearchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::Hits* Arena::CreateMaybeMessage< ::milvus::proto::milvus::Hits >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::Hits >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::SearchResults* Arena::CreateMaybeMessage< ::milvus::proto::milvus::SearchResults >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::SearchResults >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::FlushRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::FlushRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::FlushRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::PersistentSegmentInfo* Arena::CreateMaybeMessage< ::milvus::proto::milvus::PersistentSegmentInfo >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::PersistentSegmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetPersistentSegmentInfoRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetPersistentSegmentInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::GetPersistentSegmentInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetPersistentSegmentInfoResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::GetPersistentSegmentInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::QuerySegmentInfo* Arena::CreateMaybeMessage< ::milvus::proto::milvus::QuerySegmentInfo >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::QuerySegmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetQuerySegmentInfoRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetQuerySegmentInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::GetQuerySegmentInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::GetQuerySegmentInfoResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::GetQuerySegmentInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::GetQuerySegmentInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::RegisterLinkRequest* Arena::CreateMaybeMessage< ::milvus::proto::milvus::RegisterLinkRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::RegisterLinkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::milvus::RegisterLinkResponse* Arena::CreateMaybeMessage< ::milvus::proto::milvus::RegisterLinkResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::milvus::RegisterLinkResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
