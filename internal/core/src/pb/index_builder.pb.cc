// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index_builder.proto

#include "index_builder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValuePair_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_index_5fbuilder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildIndexRequest_index_5fbuilder_2eproto;
namespace milvus {
namespace proto {
namespace service {
class BuildIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildIndexRequest> _instance;
} _BuildIndexRequest_default_instance_;
class BuildIndexResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildIndexResponse> _instance;
} _BuildIndexResponse_default_instance_;
class GetIndexFilePathsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIndexFilePathsRequest> _instance;
} _GetIndexFilePathsRequest_default_instance_;
class GetIndexFilePathsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIndexFilePathsResponse> _instance;
} _GetIndexFilePathsResponse_default_instance_;
class DescribleIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribleIndexRequest> _instance;
} _DescribleIndexRequest_default_instance_;
class DescribleIndexResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribleIndexResponse> _instance;
} _DescribleIndexResponse_default_instance_;
class IndexMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexMeta> _instance;
} _IndexMeta_default_instance_;
}  // namespace service
}  // namespace proto
}  // namespace milvus
static void InitDefaultsscc_info_BuildIndexRequest_index_5fbuilder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::service::_BuildIndexRequest_default_instance_;
    new (ptr) ::milvus::proto::service::BuildIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::service::BuildIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildIndexRequest_index_5fbuilder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BuildIndexRequest_index_5fbuilder_2eproto}, {
      &scc_info_KeyValuePair_common_2eproto.base,}};

static void InitDefaultsscc_info_BuildIndexResponse_index_5fbuilder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::service::_BuildIndexResponse_default_instance_;
    new (ptr) ::milvus::proto::service::BuildIndexResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::service::BuildIndexResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildIndexResponse_index_5fbuilder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BuildIndexResponse_index_5fbuilder_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_DescribleIndexRequest_index_5fbuilder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::service::_DescribleIndexRequest_default_instance_;
    new (ptr) ::milvus::proto::service::DescribleIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::service::DescribleIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DescribleIndexRequest_index_5fbuilder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DescribleIndexRequest_index_5fbuilder_2eproto}, {}};

static void InitDefaultsscc_info_DescribleIndexResponse_index_5fbuilder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::service::_DescribleIndexResponse_default_instance_;
    new (ptr) ::milvus::proto::service::DescribleIndexResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::service::DescribleIndexResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribleIndexResponse_index_5fbuilder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DescribleIndexResponse_index_5fbuilder_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_GetIndexFilePathsRequest_index_5fbuilder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::service::_GetIndexFilePathsRequest_default_instance_;
    new (ptr) ::milvus::proto::service::GetIndexFilePathsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::service::GetIndexFilePathsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetIndexFilePathsRequest_index_5fbuilder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetIndexFilePathsRequest_index_5fbuilder_2eproto}, {}};

static void InitDefaultsscc_info_GetIndexFilePathsResponse_index_5fbuilder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::service::_GetIndexFilePathsResponse_default_instance_;
    new (ptr) ::milvus::proto::service::GetIndexFilePathsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::service::GetIndexFilePathsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetIndexFilePathsResponse_index_5fbuilder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetIndexFilePathsResponse_index_5fbuilder_2eproto}, {
      &scc_info_Status_common_2eproto.base,}};

static void InitDefaultsscc_info_IndexMeta_index_5fbuilder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::milvus::proto::service::_IndexMeta_default_instance_;
    new (ptr) ::milvus::proto::service::IndexMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::milvus::proto::service::IndexMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IndexMeta_index_5fbuilder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IndexMeta_index_5fbuilder_2eproto}, {
      &scc_info_BuildIndexRequest_index_5fbuilder_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_index_5fbuilder_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_index_5fbuilder_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_index_5fbuilder_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_index_5fbuilder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::BuildIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::BuildIndexRequest, data_paths_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::BuildIndexRequest, type_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::BuildIndexRequest, index_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::BuildIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::BuildIndexResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::BuildIndexResponse, indexid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::GetIndexFilePathsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::GetIndexFilePathsRequest, indexid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::GetIndexFilePathsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::GetIndexFilePathsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::GetIndexFilePathsResponse, indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::GetIndexFilePathsResponse, index_file_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::DescribleIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::DescribleIndexRequest, indexid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::DescribleIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::DescribleIndexResponse, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::DescribleIndexResponse, index_status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::DescribleIndexResponse, indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::DescribleIndexResponse, enque_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::DescribleIndexResponse, schedule_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::DescribleIndexResponse, build_complete_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::IndexMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::IndexMeta, status_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::IndexMeta, indexid_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::IndexMeta, enque_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::IndexMeta, schedule_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::IndexMeta, build_complete_time_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::IndexMeta, req_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::service::IndexMeta, index_file_paths_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::milvus::proto::service::BuildIndexRequest)},
  { 8, -1, sizeof(::milvus::proto::service::BuildIndexResponse)},
  { 15, -1, sizeof(::milvus::proto::service::GetIndexFilePathsRequest)},
  { 21, -1, sizeof(::milvus::proto::service::GetIndexFilePathsResponse)},
  { 29, -1, sizeof(::milvus::proto::service::DescribleIndexRequest)},
  { 35, -1, sizeof(::milvus::proto::service::DescribleIndexResponse)},
  { 46, -1, sizeof(::milvus::proto::service::IndexMeta)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::service::_BuildIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::service::_BuildIndexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::service::_GetIndexFilePathsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::service::_GetIndexFilePathsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::service::_DescribleIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::service::_DescribleIndexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::service::_IndexMeta_default_instance_),
};

const char descriptor_table_protodef_index_5fbuilder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023index_builder.proto\022\024milvus.proto.serv"
  "ice\032\014common.proto\"\230\001\n\021BuildIndexRequest\022"
  "\022\n\ndata_paths\030\002 \003(\t\0226\n\013type_params\030\003 \003(\013"
  "2!.milvus.proto.common.KeyValuePair\0227\n\014i"
  "ndex_params\030\004 \003(\0132!.milvus.proto.common."
  "KeyValuePair\"R\n\022BuildIndexResponse\022+\n\006st"
  "atus\030\001 \001(\0132\033.milvus.proto.common.Status\022"
  "\017\n\007indexID\030\002 \001(\003\"+\n\030GetIndexFilePathsReq"
  "uest\022\017\n\007indexID\030\001 \001(\003\"s\n\031GetIndexFilePat"
  "hsResponse\022+\n\006status\030\001 \001(\0132\033.milvus.prot"
  "o.common.Status\022\017\n\007indexID\030\002 \001(\003\022\030\n\020inde"
  "x_file_paths\030\003 \003(\t\"(\n\025DescribleIndexRequ"
  "est\022\017\n\007indexID\030\001 \001(\003\"\327\001\n\026DescribleIndexR"
  "esponse\022+\n\006status\030\001 \001(\0132\033.milvus.proto.c"
  "ommon.Status\0227\n\014index_status\030\002 \001(\0162!.mil"
  "vus.proto.service.IndexStatus\022\017\n\007indexID"
  "\030\003 \001(\003\022\022\n\nenque_time\030\004 \001(\003\022\025\n\rschedule_t"
  "ime\030\005 \001(\003\022\033\n\023build_complete_time\030\006 \001(\003\"\347"
  "\001\n\tIndexMeta\0221\n\006status\030\001 \001(\0162!.milvus.pr"
  "oto.service.IndexStatus\022\017\n\007indexID\030\002 \001(\003"
  "\022\022\n\nenque_time\030\003 \001(\003\022\025\n\rschedule_time\030\004 "
  "\001(\003\022\033\n\023build_complete_time\030\005 \001(\003\0224\n\003req\030"
  "\006 \001(\0132\'.milvus.proto.service.BuildIndexR"
  "equest\022\030\n\020index_file_paths\030\007 \003(\t*C\n\013Inde"
  "xStatus\022\010\n\004NONE\020\000\022\014\n\010UNISSUED\020\001\022\016\n\nINPRO"
  "GRESS\020\002\022\014\n\010FINISHED\020\0032\334\002\n\021IndexBuildServ"
  "ice\022a\n\nBuildIndex\022\'.milvus.proto.service"
  ".BuildIndexRequest\032(.milvus.proto.servic"
  "e.BuildIndexResponse\"\000\022l\n\rDescribeIndex\022"
  "+.milvus.proto.service.DescribleIndexReq"
  "uest\032,.milvus.proto.service.DescribleInd"
  "exResponse\"\000\022v\n\021GetIndexFilePaths\022..milv"
  "us.proto.service.GetIndexFilePathsReques"
  "t\032/.milvus.proto.service.GetIndexFilePat"
  "hsResponse\"\000BHZFgithub.com/zilliztech/mi"
  "lvus-distributed/internal/proto/indexbui"
  "lderpbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_index_5fbuilder_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_index_5fbuilder_2eproto_sccs[7] = {
  &scc_info_BuildIndexRequest_index_5fbuilder_2eproto.base,
  &scc_info_BuildIndexResponse_index_5fbuilder_2eproto.base,
  &scc_info_DescribleIndexRequest_index_5fbuilder_2eproto.base,
  &scc_info_DescribleIndexResponse_index_5fbuilder_2eproto.base,
  &scc_info_GetIndexFilePathsRequest_index_5fbuilder_2eproto.base,
  &scc_info_GetIndexFilePathsResponse_index_5fbuilder_2eproto.base,
  &scc_info_IndexMeta_index_5fbuilder_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_index_5fbuilder_2eproto_once;
static bool descriptor_table_index_5fbuilder_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_index_5fbuilder_2eproto = {
  &descriptor_table_index_5fbuilder_2eproto_initialized, descriptor_table_protodef_index_5fbuilder_2eproto, "index_builder.proto", 1454,
  &descriptor_table_index_5fbuilder_2eproto_once, descriptor_table_index_5fbuilder_2eproto_sccs, descriptor_table_index_5fbuilder_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_index_5fbuilder_2eproto::offsets,
  file_level_metadata_index_5fbuilder_2eproto, 7, file_level_enum_descriptors_index_5fbuilder_2eproto, file_level_service_descriptors_index_5fbuilder_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_index_5fbuilder_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_index_5fbuilder_2eproto), true);
namespace milvus {
namespace proto {
namespace service {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_index_5fbuilder_2eproto);
  return file_level_enum_descriptors_index_5fbuilder_2eproto[0];
}
bool IndexStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BuildIndexRequest::InitAsDefaultInstance() {
}
class BuildIndexRequest::_Internal {
 public:
};

void BuildIndexRequest::clear_type_params() {
  type_params_.Clear();
}
void BuildIndexRequest::clear_index_params() {
  index_params_.Clear();
}
BuildIndexRequest::BuildIndexRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.service.BuildIndexRequest)
}
BuildIndexRequest::BuildIndexRequest(const BuildIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_paths_(from.data_paths_),
      type_params_(from.type_params_),
      index_params_(from.index_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:milvus.proto.service.BuildIndexRequest)
}

void BuildIndexRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildIndexRequest_index_5fbuilder_2eproto.base);
}

BuildIndexRequest::~BuildIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.service.BuildIndexRequest)
  SharedDtor();
}

void BuildIndexRequest::SharedDtor() {
}

void BuildIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildIndexRequest& BuildIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildIndexRequest_index_5fbuilder_2eproto.base);
  return *internal_default_instance();
}


void BuildIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.service.BuildIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_paths_.Clear();
  type_params_.Clear();
  index_params_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BuildIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string data_paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_data_paths(), ptr, ctx, "milvus.proto.service.BuildIndexRequest.data_paths");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair type_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_type_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.common.KeyValuePair index_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_index_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BuildIndexRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.service.BuildIndexRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string data_paths = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_data_paths()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->data_paths(this->data_paths_size() - 1).data(),
            static_cast<int>(this->data_paths(this->data_paths_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.service.BuildIndexRequest.data_paths"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.proto.common.KeyValuePair type_params = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_type_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .milvus.proto.common.KeyValuePair index_params = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_index_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.service.BuildIndexRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.service.BuildIndexRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BuildIndexRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.service.BuildIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data_paths = 2;
  for (int i = 0, n = this->data_paths_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->data_paths(i).data(), static_cast<int>(this->data_paths(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.service.BuildIndexRequest.data_paths");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->data_paths(i), output);
  }

  // repeated .milvus.proto.common.KeyValuePair type_params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->type_params_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->type_params(static_cast<int>(i)),
      output);
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->index_params_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->index_params(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.service.BuildIndexRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildIndexRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.service.BuildIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data_paths = 2;
  for (int i = 0, n = this->data_paths_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->data_paths(i).data(), static_cast<int>(this->data_paths(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.service.BuildIndexRequest.data_paths");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->data_paths(i), target);
  }

  // repeated .milvus.proto.common.KeyValuePair type_params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->type_params_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->type_params(static_cast<int>(i)), target);
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->index_params_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->index_params(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.service.BuildIndexRequest)
  return target;
}

size_t BuildIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.service.BuildIndexRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data_paths = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->data_paths_size());
  for (int i = 0, n = this->data_paths_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->data_paths(i));
  }

  // repeated .milvus.proto.common.KeyValuePair type_params = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->type_params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->type_params(static_cast<int>(i)));
    }
  }

  // repeated .milvus.proto.common.KeyValuePair index_params = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->index_params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->index_params(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.service.BuildIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.service.BuildIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.service.BuildIndexRequest)
    MergeFrom(*source);
  }
}

void BuildIndexRequest::MergeFrom(const BuildIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.service.BuildIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_paths_.MergeFrom(from.data_paths_);
  type_params_.MergeFrom(from.type_params_);
  index_params_.MergeFrom(from.index_params_);
}

void BuildIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.service.BuildIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildIndexRequest::CopyFrom(const BuildIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.service.BuildIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildIndexRequest::IsInitialized() const {
  return true;
}

void BuildIndexRequest::InternalSwap(BuildIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_paths_.InternalSwap(CastToBase(&other->data_paths_));
  CastToBase(&type_params_)->InternalSwap(CastToBase(&other->type_params_));
  CastToBase(&index_params_)->InternalSwap(CastToBase(&other->index_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuildIndexResponse::InitAsDefaultInstance() {
  ::milvus::proto::service::_BuildIndexResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class BuildIndexResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const BuildIndexResponse* msg);
};

const ::milvus::proto::common::Status&
BuildIndexResponse::_Internal::status(const BuildIndexResponse* msg) {
  return *msg->status_;
}
void BuildIndexResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BuildIndexResponse::BuildIndexResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.service.BuildIndexResponse)
}
BuildIndexResponse::BuildIndexResponse(const BuildIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  indexid_ = from.indexid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.service.BuildIndexResponse)
}

void BuildIndexResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildIndexResponse_index_5fbuilder_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indexid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(indexid_));
}

BuildIndexResponse::~BuildIndexResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.service.BuildIndexResponse)
  SharedDtor();
}

void BuildIndexResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void BuildIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildIndexResponse& BuildIndexResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildIndexResponse_index_5fbuilder_2eproto.base);
  return *internal_default_instance();
}


void BuildIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.service.BuildIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  indexid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BuildIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 indexID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BuildIndexResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.service.BuildIndexResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 indexID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &indexid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.service.BuildIndexResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.service.BuildIndexResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BuildIndexResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.service.BuildIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->indexid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.service.BuildIndexResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildIndexResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.service.BuildIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->indexid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.service.BuildIndexResponse)
  return target;
}

size_t BuildIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.service.BuildIndexResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->indexid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildIndexResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.service.BuildIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildIndexResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildIndexResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.service.BuildIndexResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.service.BuildIndexResponse)
    MergeFrom(*source);
  }
}

void BuildIndexResponse::MergeFrom(const BuildIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.service.BuildIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
  if (from.indexid() != 0) {
    set_indexid(from.indexid());
  }
}

void BuildIndexResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.service.BuildIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildIndexResponse::CopyFrom(const BuildIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.service.BuildIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildIndexResponse::IsInitialized() const {
  return true;
}

void BuildIndexResponse::InternalSwap(BuildIndexResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(indexid_, other->indexid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildIndexResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIndexFilePathsRequest::InitAsDefaultInstance() {
}
class GetIndexFilePathsRequest::_Internal {
 public:
};

GetIndexFilePathsRequest::GetIndexFilePathsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.service.GetIndexFilePathsRequest)
}
GetIndexFilePathsRequest::GetIndexFilePathsRequest(const GetIndexFilePathsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  indexid_ = from.indexid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.service.GetIndexFilePathsRequest)
}

void GetIndexFilePathsRequest::SharedCtor() {
  indexid_ = PROTOBUF_LONGLONG(0);
}

GetIndexFilePathsRequest::~GetIndexFilePathsRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.service.GetIndexFilePathsRequest)
  SharedDtor();
}

void GetIndexFilePathsRequest::SharedDtor() {
}

void GetIndexFilePathsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIndexFilePathsRequest& GetIndexFilePathsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIndexFilePathsRequest_index_5fbuilder_2eproto.base);
  return *internal_default_instance();
}


void GetIndexFilePathsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.service.GetIndexFilePathsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indexid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetIndexFilePathsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 indexID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetIndexFilePathsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.service.GetIndexFilePathsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 indexID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &indexid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.service.GetIndexFilePathsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.service.GetIndexFilePathsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetIndexFilePathsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.service.GetIndexFilePathsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 indexID = 1;
  if (this->indexid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->indexid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.service.GetIndexFilePathsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIndexFilePathsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.service.GetIndexFilePathsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 indexID = 1;
  if (this->indexid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->indexid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.service.GetIndexFilePathsRequest)
  return target;
}

size_t GetIndexFilePathsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.service.GetIndexFilePathsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 indexID = 1;
  if (this->indexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->indexid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIndexFilePathsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.service.GetIndexFilePathsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIndexFilePathsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIndexFilePathsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.service.GetIndexFilePathsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.service.GetIndexFilePathsRequest)
    MergeFrom(*source);
  }
}

void GetIndexFilePathsRequest::MergeFrom(const GetIndexFilePathsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.service.GetIndexFilePathsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.indexid() != 0) {
    set_indexid(from.indexid());
  }
}

void GetIndexFilePathsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.service.GetIndexFilePathsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexFilePathsRequest::CopyFrom(const GetIndexFilePathsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.service.GetIndexFilePathsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexFilePathsRequest::IsInitialized() const {
  return true;
}

void GetIndexFilePathsRequest::InternalSwap(GetIndexFilePathsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(indexid_, other->indexid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexFilePathsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIndexFilePathsResponse::InitAsDefaultInstance() {
  ::milvus::proto::service::_GetIndexFilePathsResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class GetIndexFilePathsResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const GetIndexFilePathsResponse* msg);
};

const ::milvus::proto::common::Status&
GetIndexFilePathsResponse::_Internal::status(const GetIndexFilePathsResponse* msg) {
  return *msg->status_;
}
void GetIndexFilePathsResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
GetIndexFilePathsResponse::GetIndexFilePathsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.service.GetIndexFilePathsResponse)
}
GetIndexFilePathsResponse::GetIndexFilePathsResponse(const GetIndexFilePathsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      index_file_paths_(from.index_file_paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  indexid_ = from.indexid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.service.GetIndexFilePathsResponse)
}

void GetIndexFilePathsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIndexFilePathsResponse_index_5fbuilder_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indexid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(indexid_));
}

GetIndexFilePathsResponse::~GetIndexFilePathsResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.service.GetIndexFilePathsResponse)
  SharedDtor();
}

void GetIndexFilePathsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GetIndexFilePathsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIndexFilePathsResponse& GetIndexFilePathsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIndexFilePathsResponse_index_5fbuilder_2eproto.base);
  return *internal_default_instance();
}


void GetIndexFilePathsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.service.GetIndexFilePathsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_file_paths_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  indexid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetIndexFilePathsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 indexID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string index_file_paths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_index_file_paths(), ptr, ctx, "milvus.proto.service.GetIndexFilePathsResponse.index_file_paths");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetIndexFilePathsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.service.GetIndexFilePathsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 indexID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &indexid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string index_file_paths = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_index_file_paths()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->index_file_paths(this->index_file_paths_size() - 1).data(),
            static_cast<int>(this->index_file_paths(this->index_file_paths_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.service.GetIndexFilePathsResponse.index_file_paths"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.service.GetIndexFilePathsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.service.GetIndexFilePathsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetIndexFilePathsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.service.GetIndexFilePathsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->indexid(), output);
  }

  // repeated string index_file_paths = 3;
  for (int i = 0, n = this->index_file_paths_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_file_paths(i).data(), static_cast<int>(this->index_file_paths(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.service.GetIndexFilePathsResponse.index_file_paths");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->index_file_paths(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.service.GetIndexFilePathsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIndexFilePathsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.service.GetIndexFilePathsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->indexid(), target);
  }

  // repeated string index_file_paths = 3;
  for (int i = 0, n = this->index_file_paths_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_file_paths(i).data(), static_cast<int>(this->index_file_paths(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.service.GetIndexFilePathsResponse.index_file_paths");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->index_file_paths(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.service.GetIndexFilePathsResponse)
  return target;
}

size_t GetIndexFilePathsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.service.GetIndexFilePathsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string index_file_paths = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->index_file_paths_size());
  for (int i = 0, n = this->index_file_paths_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->index_file_paths(i));
  }

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->indexid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIndexFilePathsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.service.GetIndexFilePathsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIndexFilePathsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIndexFilePathsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.service.GetIndexFilePathsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.service.GetIndexFilePathsResponse)
    MergeFrom(*source);
  }
}

void GetIndexFilePathsResponse::MergeFrom(const GetIndexFilePathsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.service.GetIndexFilePathsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_file_paths_.MergeFrom(from.index_file_paths_);
  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
  if (from.indexid() != 0) {
    set_indexid(from.indexid());
  }
}

void GetIndexFilePathsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.service.GetIndexFilePathsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexFilePathsResponse::CopyFrom(const GetIndexFilePathsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.service.GetIndexFilePathsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexFilePathsResponse::IsInitialized() const {
  return true;
}

void GetIndexFilePathsResponse::InternalSwap(GetIndexFilePathsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  index_file_paths_.InternalSwap(CastToBase(&other->index_file_paths_));
  swap(status_, other->status_);
  swap(indexid_, other->indexid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexFilePathsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribleIndexRequest::InitAsDefaultInstance() {
}
class DescribleIndexRequest::_Internal {
 public:
};

DescribleIndexRequest::DescribleIndexRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.service.DescribleIndexRequest)
}
DescribleIndexRequest::DescribleIndexRequest(const DescribleIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  indexid_ = from.indexid_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.service.DescribleIndexRequest)
}

void DescribleIndexRequest::SharedCtor() {
  indexid_ = PROTOBUF_LONGLONG(0);
}

DescribleIndexRequest::~DescribleIndexRequest() {
  // @@protoc_insertion_point(destructor:milvus.proto.service.DescribleIndexRequest)
  SharedDtor();
}

void DescribleIndexRequest::SharedDtor() {
}

void DescribleIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribleIndexRequest& DescribleIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribleIndexRequest_index_5fbuilder_2eproto.base);
  return *internal_default_instance();
}


void DescribleIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.service.DescribleIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indexid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DescribleIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 indexID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DescribleIndexRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.service.DescribleIndexRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 indexID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &indexid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.service.DescribleIndexRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.service.DescribleIndexRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DescribleIndexRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.service.DescribleIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 indexID = 1;
  if (this->indexid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->indexid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.service.DescribleIndexRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribleIndexRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.service.DescribleIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 indexID = 1;
  if (this->indexid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->indexid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.service.DescribleIndexRequest)
  return target;
}

size_t DescribleIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.service.DescribleIndexRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 indexID = 1;
  if (this->indexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->indexid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribleIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.service.DescribleIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribleIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribleIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.service.DescribleIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.service.DescribleIndexRequest)
    MergeFrom(*source);
  }
}

void DescribleIndexRequest::MergeFrom(const DescribleIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.service.DescribleIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.indexid() != 0) {
    set_indexid(from.indexid());
  }
}

void DescribleIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.service.DescribleIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribleIndexRequest::CopyFrom(const DescribleIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.service.DescribleIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribleIndexRequest::IsInitialized() const {
  return true;
}

void DescribleIndexRequest::InternalSwap(DescribleIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(indexid_, other->indexid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribleIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribleIndexResponse::InitAsDefaultInstance() {
  ::milvus::proto::service::_DescribleIndexResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::milvus::proto::common::Status*>(
      ::milvus::proto::common::Status::internal_default_instance());
}
class DescribleIndexResponse::_Internal {
 public:
  static const ::milvus::proto::common::Status& status(const DescribleIndexResponse* msg);
};

const ::milvus::proto::common::Status&
DescribleIndexResponse::_Internal::status(const DescribleIndexResponse* msg) {
  return *msg->status_;
}
void DescribleIndexResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DescribleIndexResponse::DescribleIndexResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.service.DescribleIndexResponse)
}
DescribleIndexResponse::DescribleIndexResponse(const DescribleIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::milvus::proto::common::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&indexid_, &from.indexid_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_status_) -
    reinterpret_cast<char*>(&indexid_)) + sizeof(index_status_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.service.DescribleIndexResponse)
}

void DescribleIndexResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribleIndexResponse_index_5fbuilder_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_status_) -
      reinterpret_cast<char*>(&status_)) + sizeof(index_status_));
}

DescribleIndexResponse::~DescribleIndexResponse() {
  // @@protoc_insertion_point(destructor:milvus.proto.service.DescribleIndexResponse)
  SharedDtor();
}

void DescribleIndexResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void DescribleIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribleIndexResponse& DescribleIndexResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribleIndexResponse_index_5fbuilder_2eproto.base);
  return *internal_default_instance();
}


void DescribleIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.service.DescribleIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&indexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_status_) -
      reinterpret_cast<char*>(&indexid_)) + sizeof(index_status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DescribleIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.common.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.service.IndexStatus index_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_index_status(static_cast<::milvus::proto::service::IndexStatus>(val));
        } else goto handle_unusual;
        continue;
      // int64 indexID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 enque_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enque_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 schedule_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          schedule_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 build_complete_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          build_complete_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DescribleIndexResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.service.DescribleIndexResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.common.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .milvus.proto.service.IndexStatus index_status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_index_status(static_cast< ::milvus::proto::service::IndexStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 indexID = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &indexid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 enque_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &enque_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 schedule_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &schedule_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 build_complete_time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &build_complete_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.service.DescribleIndexResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.service.DescribleIndexResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DescribleIndexResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.service.DescribleIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // .milvus.proto.service.IndexStatus index_status = 2;
  if (this->index_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->index_status(), output);
  }

  // int64 indexID = 3;
  if (this->indexid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->indexid(), output);
  }

  // int64 enque_time = 4;
  if (this->enque_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->enque_time(), output);
  }

  // int64 schedule_time = 5;
  if (this->schedule_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->schedule_time(), output);
  }

  // int64 build_complete_time = 6;
  if (this->build_complete_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->build_complete_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.service.DescribleIndexResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribleIndexResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.service.DescribleIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // .milvus.proto.service.IndexStatus index_status = 2;
  if (this->index_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->index_status(), target);
  }

  // int64 indexID = 3;
  if (this->indexid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->indexid(), target);
  }

  // int64 enque_time = 4;
  if (this->enque_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->enque_time(), target);
  }

  // int64 schedule_time = 5;
  if (this->schedule_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->schedule_time(), target);
  }

  // int64 build_complete_time = 6;
  if (this->build_complete_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->build_complete_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.service.DescribleIndexResponse)
  return target;
}

size_t DescribleIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.service.DescribleIndexResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.common.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 indexID = 3;
  if (this->indexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->indexid());
  }

  // int64 enque_time = 4;
  if (this->enque_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->enque_time());
  }

  // int64 schedule_time = 5;
  if (this->schedule_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->schedule_time());
  }

  // int64 build_complete_time = 6;
  if (this->build_complete_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->build_complete_time());
  }

  // .milvus.proto.service.IndexStatus index_status = 2;
  if (this->index_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->index_status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribleIndexResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.service.DescribleIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribleIndexResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribleIndexResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.service.DescribleIndexResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.service.DescribleIndexResponse)
    MergeFrom(*source);
  }
}

void DescribleIndexResponse::MergeFrom(const DescribleIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.service.DescribleIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::milvus::proto::common::Status::MergeFrom(from.status());
  }
  if (from.indexid() != 0) {
    set_indexid(from.indexid());
  }
  if (from.enque_time() != 0) {
    set_enque_time(from.enque_time());
  }
  if (from.schedule_time() != 0) {
    set_schedule_time(from.schedule_time());
  }
  if (from.build_complete_time() != 0) {
    set_build_complete_time(from.build_complete_time());
  }
  if (from.index_status() != 0) {
    set_index_status(from.index_status());
  }
}

void DescribleIndexResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.service.DescribleIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribleIndexResponse::CopyFrom(const DescribleIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.service.DescribleIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribleIndexResponse::IsInitialized() const {
  return true;
}

void DescribleIndexResponse::InternalSwap(DescribleIndexResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(indexid_, other->indexid_);
  swap(enque_time_, other->enque_time_);
  swap(schedule_time_, other->schedule_time_);
  swap(build_complete_time_, other->build_complete_time_);
  swap(index_status_, other->index_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribleIndexResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IndexMeta::InitAsDefaultInstance() {
  ::milvus::proto::service::_IndexMeta_default_instance_._instance.get_mutable()->req_ = const_cast< ::milvus::proto::service::BuildIndexRequest*>(
      ::milvus::proto::service::BuildIndexRequest::internal_default_instance());
}
class IndexMeta::_Internal {
 public:
  static const ::milvus::proto::service::BuildIndexRequest& req(const IndexMeta* msg);
};

const ::milvus::proto::service::BuildIndexRequest&
IndexMeta::_Internal::req(const IndexMeta* msg) {
  return *msg->req_;
}
IndexMeta::IndexMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:milvus.proto.service.IndexMeta)
}
IndexMeta::IndexMeta(const IndexMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      index_file_paths_(from.index_file_paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_req()) {
    req_ = new ::milvus::proto::service::BuildIndexRequest(*from.req_);
  } else {
    req_ = nullptr;
  }
  ::memcpy(&indexid_, &from.indexid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&indexid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.service.IndexMeta)
}

void IndexMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexMeta_index_5fbuilder_2eproto.base);
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&req_)) + sizeof(status_));
}

IndexMeta::~IndexMeta() {
  // @@protoc_insertion_point(destructor:milvus.proto.service.IndexMeta)
  SharedDtor();
}

void IndexMeta::SharedDtor() {
  if (this != internal_default_instance()) delete req_;
}

void IndexMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexMeta& IndexMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexMeta_index_5fbuilder_2eproto.base);
  return *internal_default_instance();
}


void IndexMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.service.IndexMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_file_paths_.Clear();
  if (GetArenaNoVirtual() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  ::memset(&indexid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&indexid_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IndexMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .milvus.proto.service.IndexStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::milvus::proto::service::IndexStatus>(val));
        } else goto handle_unusual;
        continue;
      // int64 indexID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          indexid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 enque_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enque_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 schedule_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          schedule_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 build_complete_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          build_complete_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.service.BuildIndexRequest req = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string index_file_paths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_index_file_paths(), ptr, ctx, "milvus.proto.service.IndexMeta.index_file_paths");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IndexMeta::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:milvus.proto.service.IndexMeta)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .milvus.proto.service.IndexStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::milvus::proto::service::IndexStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 indexID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &indexid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 enque_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &enque_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 schedule_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &schedule_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 build_complete_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &build_complete_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .milvus.proto.service.BuildIndexRequest req = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string index_file_paths = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_index_file_paths()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->index_file_paths(this->index_file_paths_size() - 1).data(),
            static_cast<int>(this->index_file_paths(this->index_file_paths_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "milvus.proto.service.IndexMeta.index_file_paths"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:milvus.proto.service.IndexMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:milvus.proto.service.IndexMeta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IndexMeta::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:milvus.proto.service.IndexMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.service.IndexStatus status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->indexid(), output);
  }

  // int64 enque_time = 3;
  if (this->enque_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->enque_time(), output);
  }

  // int64 schedule_time = 4;
  if (this->schedule_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->schedule_time(), output);
  }

  // int64 build_complete_time = 5;
  if (this->build_complete_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->build_complete_time(), output);
  }

  // .milvus.proto.service.BuildIndexRequest req = 6;
  if (this->has_req()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::req(this), output);
  }

  // repeated string index_file_paths = 7;
  for (int i = 0, n = this->index_file_paths_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_file_paths(i).data(), static_cast<int>(this->index_file_paths(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.service.IndexMeta.index_file_paths");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->index_file_paths(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:milvus.proto.service.IndexMeta)
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexMeta::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.service.IndexMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.service.IndexStatus status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->indexid(), target);
  }

  // int64 enque_time = 3;
  if (this->enque_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->enque_time(), target);
  }

  // int64 schedule_time = 4;
  if (this->schedule_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->schedule_time(), target);
  }

  // int64 build_complete_time = 5;
  if (this->build_complete_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->build_complete_time(), target);
  }

  // .milvus.proto.service.BuildIndexRequest req = 6;
  if (this->has_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::req(this), target);
  }

  // repeated string index_file_paths = 7;
  for (int i = 0, n = this->index_file_paths_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index_file_paths(i).data(), static_cast<int>(this->index_file_paths(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.service.IndexMeta.index_file_paths");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(7, this->index_file_paths(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.service.IndexMeta)
  return target;
}

size_t IndexMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.service.IndexMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string index_file_paths = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->index_file_paths_size());
  for (int i = 0, n = this->index_file_paths_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->index_file_paths(i));
  }

  // .milvus.proto.service.BuildIndexRequest req = 6;
  if (this->has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // int64 indexID = 2;
  if (this->indexid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->indexid());
  }

  // int64 enque_time = 3;
  if (this->enque_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->enque_time());
  }

  // int64 schedule_time = 4;
  if (this->schedule_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->schedule_time());
  }

  // int64 build_complete_time = 5;
  if (this->build_complete_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->build_complete_time());
  }

  // .milvus.proto.service.IndexStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.service.IndexMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.service.IndexMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.service.IndexMeta)
    MergeFrom(*source);
  }
}

void IndexMeta::MergeFrom(const IndexMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.service.IndexMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_file_paths_.MergeFrom(from.index_file_paths_);
  if (from.has_req()) {
    mutable_req()->::milvus::proto::service::BuildIndexRequest::MergeFrom(from.req());
  }
  if (from.indexid() != 0) {
    set_indexid(from.indexid());
  }
  if (from.enque_time() != 0) {
    set_enque_time(from.enque_time());
  }
  if (from.schedule_time() != 0) {
    set_schedule_time(from.schedule_time());
  }
  if (from.build_complete_time() != 0) {
    set_build_complete_time(from.build_complete_time());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void IndexMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.service.IndexMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexMeta::CopyFrom(const IndexMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.service.IndexMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexMeta::IsInitialized() const {
  return true;
}

void IndexMeta::InternalSwap(IndexMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  index_file_paths_.InternalSwap(CastToBase(&other->index_file_paths_));
  swap(req_, other->req_);
  swap(indexid_, other->indexid_);
  swap(enque_time_, other->enque_time_);
  swap(schedule_time_, other->schedule_time_);
  swap(build_complete_time_, other->build_complete_time_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::milvus::proto::service::BuildIndexRequest* Arena::CreateMaybeMessage< ::milvus::proto::service::BuildIndexRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::service::BuildIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::service::BuildIndexResponse* Arena::CreateMaybeMessage< ::milvus::proto::service::BuildIndexResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::service::BuildIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::service::GetIndexFilePathsRequest* Arena::CreateMaybeMessage< ::milvus::proto::service::GetIndexFilePathsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::service::GetIndexFilePathsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::service::GetIndexFilePathsResponse* Arena::CreateMaybeMessage< ::milvus::proto::service::GetIndexFilePathsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::service::GetIndexFilePathsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::service::DescribleIndexRequest* Arena::CreateMaybeMessage< ::milvus::proto::service::DescribleIndexRequest >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::service::DescribleIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::service::DescribleIndexResponse* Arena::CreateMaybeMessage< ::milvus::proto::service::DescribleIndexResponse >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::service::DescribleIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::service::IndexMeta* Arena::CreateMaybeMessage< ::milvus::proto::service::IndexMeta >(Arena* arena) {
  return Arena::CreateInternal< ::milvus::proto::service::IndexMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
